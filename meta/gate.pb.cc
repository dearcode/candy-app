// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace candy {
namespace meta {

namespace {

const ::google::protobuf::Descriptor* GateFindUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateFindUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateFindUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateFindUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateAddFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateAddFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateAddFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateAddFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateCreateGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateCreateGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateCreateGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateCreateGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUpdateUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUpdateUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUpdateUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUpdateUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUpdateUserPasswordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUpdateUserPasswordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUpdateUserPasswordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUpdateUserPasswordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateGetUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateGetUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateGetUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateGetUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateHeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateHeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateHeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateHeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUserLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUserLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUserLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUserLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUserLogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUserLogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUserLogoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUserLogoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUploadFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUploadFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUploadFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUploadFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateCheckFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateCheckFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateCheckFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateCheckFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateDownloadFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateDownloadFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateDownloadFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateDownloadFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateDownloadFileResponse_FilesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GateNoticeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateNoticeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateNoticeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateNoticeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateLoadMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateLoadMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateLoadMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateLoadMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateLoadGroupListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateLoadGroupListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateLoadGroupListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateLoadGroupListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateLoadFriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateLoadFriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateLoadFriendListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateLoadFriendListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateSendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateSendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateSendMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateSendMessageResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gate_2eproto() {
  protobuf_AddDesc_gate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gate.proto");
  GOOGLE_CHECK(file != NULL);
  GateFindUserRequest_descriptor_ = file->message_type(0);
  static const int GateFindUserRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateFindUserRequest, user_),
  };
  GateFindUserRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateFindUserRequest_descriptor_,
      GateFindUserRequest::default_instance_,
      GateFindUserRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateFindUserRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateFindUserRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateFindUserRequest, _is_default_instance_));
  GateFindUserResponse_descriptor_ = file->message_type(1);
  static const int GateFindUserResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateFindUserResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateFindUserResponse, users_),
  };
  GateFindUserResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateFindUserResponse_descriptor_,
      GateFindUserResponse::default_instance_,
      GateFindUserResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateFindUserResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateFindUserResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateFindUserResponse, _is_default_instance_));
  GateAddFriendRequest_descriptor_ = file->message_type(2);
  static const int GateAddFriendRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendRequest, confirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendRequest, msg_),
  };
  GateAddFriendRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateAddFriendRequest_descriptor_,
      GateAddFriendRequest::default_instance_,
      GateAddFriendRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateAddFriendRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendRequest, _is_default_instance_));
  GateAddFriendResponse_descriptor_ = file->message_type(3);
  static const int GateAddFriendResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendResponse, confirm_),
  };
  GateAddFriendResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateAddFriendResponse_descriptor_,
      GateAddFriendResponse::default_instance_,
      GateAddFriendResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateAddFriendResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateAddFriendResponse, _is_default_instance_));
  GateCreateGroupRequest_descriptor_ = file->message_type(4);
  static const int GateCreateGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCreateGroupRequest, groupname_),
  };
  GateCreateGroupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateCreateGroupRequest_descriptor_,
      GateCreateGroupRequest::default_instance_,
      GateCreateGroupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateCreateGroupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCreateGroupRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCreateGroupRequest, _is_default_instance_));
  GateCreateGroupResponse_descriptor_ = file->message_type(5);
  static const int GateCreateGroupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCreateGroupResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCreateGroupResponse, id_),
  };
  GateCreateGroupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateCreateGroupResponse_descriptor_,
      GateCreateGroupResponse::default_instance_,
      GateCreateGroupResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateCreateGroupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCreateGroupResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCreateGroupResponse, _is_default_instance_));
  GateRegisterRequest_descriptor_ = file->message_type(6);
  static const int GateRegisterRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterRequest, password_),
  };
  GateRegisterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateRegisterRequest_descriptor_,
      GateRegisterRequest::default_instance_,
      GateRegisterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateRegisterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterRequest, _is_default_instance_));
  GateRegisterResponse_descriptor_ = file->message_type(7);
  static const int GateRegisterResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterResponse, id_),
  };
  GateRegisterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateRegisterResponse_descriptor_,
      GateRegisterResponse::default_instance_,
      GateRegisterResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateRegisterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegisterResponse, _is_default_instance_));
  GateUpdateUserInfoRequest_descriptor_ = file->message_type(8);
  static const int GateUpdateUserInfoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoRequest, avatar_),
  };
  GateUpdateUserInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUpdateUserInfoRequest_descriptor_,
      GateUpdateUserInfoRequest::default_instance_,
      GateUpdateUserInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUpdateUserInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoRequest, _is_default_instance_));
  GateUpdateUserInfoResponse_descriptor_ = file->message_type(9);
  static const int GateUpdateUserInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoResponse, id_),
  };
  GateUpdateUserInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUpdateUserInfoResponse_descriptor_,
      GateUpdateUserInfoResponse::default_instance_,
      GateUpdateUserInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUpdateUserInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserInfoResponse, _is_default_instance_));
  GateUpdateUserPasswordRequest_descriptor_ = file->message_type(10);
  static const int GateUpdateUserPasswordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordRequest, password_),
  };
  GateUpdateUserPasswordRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUpdateUserPasswordRequest_descriptor_,
      GateUpdateUserPasswordRequest::default_instance_,
      GateUpdateUserPasswordRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUpdateUserPasswordRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordRequest, _is_default_instance_));
  GateUpdateUserPasswordResponse_descriptor_ = file->message_type(11);
  static const int GateUpdateUserPasswordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordResponse, id_),
  };
  GateUpdateUserPasswordResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUpdateUserPasswordResponse_descriptor_,
      GateUpdateUserPasswordResponse::default_instance_,
      GateUpdateUserPasswordResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUpdateUserPasswordResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUpdateUserPasswordResponse, _is_default_instance_));
  GateGetUserInfoRequest_descriptor_ = file->message_type(12);
  static const int GateGetUserInfoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoRequest, userid_),
  };
  GateGetUserInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateGetUserInfoRequest_descriptor_,
      GateGetUserInfoRequest::default_instance_,
      GateGetUserInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateGetUserInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoRequest, _is_default_instance_));
  GateGetUserInfoResponse_descriptor_ = file->message_type(13);
  static const int GateGetUserInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoResponse, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoResponse, avatar_),
  };
  GateGetUserInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateGetUserInfoResponse_descriptor_,
      GateGetUserInfoResponse::default_instance_,
      GateGetUserInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateGetUserInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateGetUserInfoResponse, _is_default_instance_));
  GateHeartbeatRequest_descriptor_ = file->message_type(14);
  static const int GateHeartbeatRequest_offsets_[1] = {
  };
  GateHeartbeatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateHeartbeatRequest_descriptor_,
      GateHeartbeatRequest::default_instance_,
      GateHeartbeatRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateHeartbeatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateHeartbeatRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateHeartbeatRequest, _is_default_instance_));
  GateHeartbeatResponse_descriptor_ = file->message_type(15);
  static const int GateHeartbeatResponse_offsets_[1] = {
  };
  GateHeartbeatResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateHeartbeatResponse_descriptor_,
      GateHeartbeatResponse::default_instance_,
      GateHeartbeatResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateHeartbeatResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateHeartbeatResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateHeartbeatResponse, _is_default_instance_));
  GateUserLoginRequest_descriptor_ = file->message_type(16);
  static const int GateUserLoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginRequest, password_),
  };
  GateUserLoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUserLoginRequest_descriptor_,
      GateUserLoginRequest::default_instance_,
      GateUserLoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUserLoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginRequest, _is_default_instance_));
  GateUserLoginResponse_descriptor_ = file->message_type(17);
  static const int GateUserLoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginResponse, id_),
  };
  GateUserLoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUserLoginResponse_descriptor_,
      GateUserLoginResponse::default_instance_,
      GateUserLoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUserLoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLoginResponse, _is_default_instance_));
  GateUserLogoutRequest_descriptor_ = file->message_type(18);
  static const int GateUserLogoutRequest_offsets_[1] = {
  };
  GateUserLogoutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUserLogoutRequest_descriptor_,
      GateUserLogoutRequest::default_instance_,
      GateUserLogoutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUserLogoutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLogoutRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLogoutRequest, _is_default_instance_));
  GateUserLogoutResponse_descriptor_ = file->message_type(19);
  static const int GateUserLogoutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLogoutResponse, header_),
  };
  GateUserLogoutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUserLogoutResponse_descriptor_,
      GateUserLogoutResponse::default_instance_,
      GateUserLogoutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUserLogoutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLogoutResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserLogoutResponse, _is_default_instance_));
  GateUploadFileRequest_descriptor_ = file->message_type(20);
  static const int GateUploadFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUploadFileRequest, file_),
  };
  GateUploadFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUploadFileRequest_descriptor_,
      GateUploadFileRequest::default_instance_,
      GateUploadFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUploadFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUploadFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUploadFileRequest, _is_default_instance_));
  GateUploadFileResponse_descriptor_ = file->message_type(21);
  static const int GateUploadFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUploadFileResponse, header_),
  };
  GateUploadFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUploadFileResponse_descriptor_,
      GateUploadFileResponse::default_instance_,
      GateUploadFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateUploadFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUploadFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUploadFileResponse, _is_default_instance_));
  GateCheckFileRequest_descriptor_ = file->message_type(22);
  static const int GateCheckFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCheckFileRequest, names_),
  };
  GateCheckFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateCheckFileRequest_descriptor_,
      GateCheckFileRequest::default_instance_,
      GateCheckFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateCheckFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCheckFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCheckFileRequest, _is_default_instance_));
  GateCheckFileResponse_descriptor_ = file->message_type(23);
  static const int GateCheckFileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCheckFileResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCheckFileResponse, names_),
  };
  GateCheckFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateCheckFileResponse_descriptor_,
      GateCheckFileResponse::default_instance_,
      GateCheckFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateCheckFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCheckFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCheckFileResponse, _is_default_instance_));
  GateDownloadFileRequest_descriptor_ = file->message_type(24);
  static const int GateDownloadFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateDownloadFileRequest, names_),
  };
  GateDownloadFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateDownloadFileRequest_descriptor_,
      GateDownloadFileRequest::default_instance_,
      GateDownloadFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateDownloadFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateDownloadFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateDownloadFileRequest, _is_default_instance_));
  GateDownloadFileResponse_descriptor_ = file->message_type(25);
  static const int GateDownloadFileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateDownloadFileResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateDownloadFileResponse, files_),
  };
  GateDownloadFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateDownloadFileResponse_descriptor_,
      GateDownloadFileResponse::default_instance_,
      GateDownloadFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateDownloadFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateDownloadFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateDownloadFileResponse, _is_default_instance_));
  GateDownloadFileResponse_FilesEntry_descriptor_ = GateDownloadFileResponse_descriptor_->nested_type(0);
  GateNoticeRequest_descriptor_ = file->message_type(26);
  static const int GateNoticeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNoticeRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNoticeRequest, msg_),
  };
  GateNoticeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateNoticeRequest_descriptor_,
      GateNoticeRequest::default_instance_,
      GateNoticeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateNoticeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNoticeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNoticeRequest, _is_default_instance_));
  GateNoticeResponse_descriptor_ = file->message_type(27);
  static const int GateNoticeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNoticeResponse, header_),
  };
  GateNoticeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateNoticeResponse_descriptor_,
      GateNoticeResponse::default_instance_,
      GateNoticeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateNoticeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNoticeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNoticeResponse, _is_default_instance_));
  GateLoadMessageRequest_descriptor_ = file->message_type(28);
  static const int GateLoadMessageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageRequest, reverse_),
  };
  GateLoadMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateLoadMessageRequest_descriptor_,
      GateLoadMessageRequest::default_instance_,
      GateLoadMessageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateLoadMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageRequest, _is_default_instance_));
  GateLoadMessageResponse_descriptor_ = file->message_type(29);
  static const int GateLoadMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageResponse, msgs_),
  };
  GateLoadMessageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateLoadMessageResponse_descriptor_,
      GateLoadMessageResponse::default_instance_,
      GateLoadMessageResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateLoadMessageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadMessageResponse, _is_default_instance_));
  GateLoadGroupListRequest_descriptor_ = file->message_type(30);
  static const int GateLoadGroupListRequest_offsets_[1] = {
  };
  GateLoadGroupListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateLoadGroupListRequest_descriptor_,
      GateLoadGroupListRequest::default_instance_,
      GateLoadGroupListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateLoadGroupListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadGroupListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadGroupListRequest, _is_default_instance_));
  GateLoadGroupListResponse_descriptor_ = file->message_type(31);
  static const int GateLoadGroupListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadGroupListResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadGroupListResponse, groups_),
  };
  GateLoadGroupListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateLoadGroupListResponse_descriptor_,
      GateLoadGroupListResponse::default_instance_,
      GateLoadGroupListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateLoadGroupListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadGroupListResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadGroupListResponse, _is_default_instance_));
  GateLoadFriendListRequest_descriptor_ = file->message_type(32);
  static const int GateLoadFriendListRequest_offsets_[1] = {
  };
  GateLoadFriendListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateLoadFriendListRequest_descriptor_,
      GateLoadFriendListRequest::default_instance_,
      GateLoadFriendListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateLoadFriendListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadFriendListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadFriendListRequest, _is_default_instance_));
  GateLoadFriendListResponse_descriptor_ = file->message_type(33);
  static const int GateLoadFriendListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadFriendListResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadFriendListResponse, users_),
  };
  GateLoadFriendListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateLoadFriendListResponse_descriptor_,
      GateLoadFriendListResponse::default_instance_,
      GateLoadFriendListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateLoadFriendListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadFriendListResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLoadFriendListResponse, _is_default_instance_));
  GateSendMessageRequest_descriptor_ = file->message_type(34);
  static const int GateSendMessageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSendMessageRequest, msg_),
  };
  GateSendMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateSendMessageRequest_descriptor_,
      GateSendMessageRequest::default_instance_,
      GateSendMessageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateSendMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSendMessageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSendMessageRequest, _is_default_instance_));
  GateSendMessageResponse_descriptor_ = file->message_type(35);
  static const int GateSendMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSendMessageResponse, header_),
  };
  GateSendMessageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateSendMessageResponse_descriptor_,
      GateSendMessageResponse::default_instance_,
      GateSendMessageResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GateSendMessageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSendMessageResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSendMessageResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateFindUserRequest_descriptor_, &GateFindUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateFindUserResponse_descriptor_, &GateFindUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateAddFriendRequest_descriptor_, &GateAddFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateAddFriendResponse_descriptor_, &GateAddFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateCreateGroupRequest_descriptor_, &GateCreateGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateCreateGroupResponse_descriptor_, &GateCreateGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateRegisterRequest_descriptor_, &GateRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateRegisterResponse_descriptor_, &GateRegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUpdateUserInfoRequest_descriptor_, &GateUpdateUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUpdateUserInfoResponse_descriptor_, &GateUpdateUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUpdateUserPasswordRequest_descriptor_, &GateUpdateUserPasswordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUpdateUserPasswordResponse_descriptor_, &GateUpdateUserPasswordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateGetUserInfoRequest_descriptor_, &GateGetUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateGetUserInfoResponse_descriptor_, &GateGetUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateHeartbeatRequest_descriptor_, &GateHeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateHeartbeatResponse_descriptor_, &GateHeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUserLoginRequest_descriptor_, &GateUserLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUserLoginResponse_descriptor_, &GateUserLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUserLogoutRequest_descriptor_, &GateUserLogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUserLogoutResponse_descriptor_, &GateUserLogoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUploadFileRequest_descriptor_, &GateUploadFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUploadFileResponse_descriptor_, &GateUploadFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateCheckFileRequest_descriptor_, &GateCheckFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateCheckFileResponse_descriptor_, &GateCheckFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateDownloadFileRequest_descriptor_, &GateDownloadFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateDownloadFileResponse_descriptor_, &GateDownloadFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GateDownloadFileResponse_FilesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
            0>::CreateDefaultInstance(
                GateDownloadFileResponse_FilesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateNoticeRequest_descriptor_, &GateNoticeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateNoticeResponse_descriptor_, &GateNoticeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateLoadMessageRequest_descriptor_, &GateLoadMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateLoadMessageResponse_descriptor_, &GateLoadMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateLoadGroupListRequest_descriptor_, &GateLoadGroupListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateLoadGroupListResponse_descriptor_, &GateLoadGroupListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateLoadFriendListRequest_descriptor_, &GateLoadFriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateLoadFriendListResponse_descriptor_, &GateLoadFriendListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateSendMessageRequest_descriptor_, &GateSendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateSendMessageResponse_descriptor_, &GateSendMessageResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gate_2eproto() {
  delete GateFindUserRequest::default_instance_;
  delete GateFindUserRequest_reflection_;
  delete GateFindUserResponse::default_instance_;
  delete GateFindUserResponse_reflection_;
  delete GateAddFriendRequest::default_instance_;
  delete GateAddFriendRequest_reflection_;
  delete GateAddFriendResponse::default_instance_;
  delete GateAddFriendResponse_reflection_;
  delete GateCreateGroupRequest::default_instance_;
  delete GateCreateGroupRequest_reflection_;
  delete GateCreateGroupResponse::default_instance_;
  delete GateCreateGroupResponse_reflection_;
  delete GateRegisterRequest::default_instance_;
  delete GateRegisterRequest_reflection_;
  delete GateRegisterResponse::default_instance_;
  delete GateRegisterResponse_reflection_;
  delete GateUpdateUserInfoRequest::default_instance_;
  delete GateUpdateUserInfoRequest_reflection_;
  delete GateUpdateUserInfoResponse::default_instance_;
  delete GateUpdateUserInfoResponse_reflection_;
  delete GateUpdateUserPasswordRequest::default_instance_;
  delete GateUpdateUserPasswordRequest_reflection_;
  delete GateUpdateUserPasswordResponse::default_instance_;
  delete GateUpdateUserPasswordResponse_reflection_;
  delete GateGetUserInfoRequest::default_instance_;
  delete GateGetUserInfoRequest_reflection_;
  delete GateGetUserInfoResponse::default_instance_;
  delete GateGetUserInfoResponse_reflection_;
  delete GateHeartbeatRequest::default_instance_;
  delete GateHeartbeatRequest_reflection_;
  delete GateHeartbeatResponse::default_instance_;
  delete GateHeartbeatResponse_reflection_;
  delete GateUserLoginRequest::default_instance_;
  delete GateUserLoginRequest_reflection_;
  delete GateUserLoginResponse::default_instance_;
  delete GateUserLoginResponse_reflection_;
  delete GateUserLogoutRequest::default_instance_;
  delete GateUserLogoutRequest_reflection_;
  delete GateUserLogoutResponse::default_instance_;
  delete GateUserLogoutResponse_reflection_;
  delete GateUploadFileRequest::default_instance_;
  delete GateUploadFileRequest_reflection_;
  delete GateUploadFileResponse::default_instance_;
  delete GateUploadFileResponse_reflection_;
  delete GateCheckFileRequest::default_instance_;
  delete GateCheckFileRequest_reflection_;
  delete GateCheckFileResponse::default_instance_;
  delete GateCheckFileResponse_reflection_;
  delete GateDownloadFileRequest::default_instance_;
  delete GateDownloadFileRequest_reflection_;
  delete GateDownloadFileResponse::default_instance_;
  delete GateDownloadFileResponse_reflection_;
  delete GateNoticeRequest::default_instance_;
  delete GateNoticeRequest_reflection_;
  delete GateNoticeResponse::default_instance_;
  delete GateNoticeResponse_reflection_;
  delete GateLoadMessageRequest::default_instance_;
  delete GateLoadMessageRequest_reflection_;
  delete GateLoadMessageResponse::default_instance_;
  delete GateLoadMessageResponse_reflection_;
  delete GateLoadGroupListRequest::default_instance_;
  delete GateLoadGroupListRequest_reflection_;
  delete GateLoadGroupListResponse::default_instance_;
  delete GateLoadGroupListResponse_reflection_;
  delete GateLoadFriendListRequest::default_instance_;
  delete GateLoadFriendListRequest_reflection_;
  delete GateLoadFriendListResponse::default_instance_;
  delete GateLoadFriendListResponse_reflection_;
  delete GateSendMessageRequest::default_instance_;
  delete GateSendMessageRequest_reflection_;
  delete GateSendMessageResponse::default_instance_;
  delete GateSendMessageResponse_reflection_;
}

void protobuf_AddDesc_gate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::candy::meta::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngate.proto\022\ncandy.meta\032\014common.proto\"#"
    "\n\023GateFindUserRequest\022\014\n\004User\030\001 \001(\t\"Q\n\024G"
    "ateFindUserResponse\022*\n\006header\030\001 \001(\0132\032.ca"
    "ndy.meta.ResponseHeader\022\r\n\005users\030\002 \003(\t\"D"
    "\n\024GateAddFriendRequest\022\016\n\006UserID\030\001 \001(\003\022\017"
    "\n\007Confirm\030\002 \001(\010\022\013\n\003Msg\030\003 \001(\t\"T\n\025GateAddF"
    "riendResponse\022*\n\006header\030\001 \001(\0132\032.candy.me"
    "ta.ResponseHeader\022\017\n\007Confirm\030\002 \001(\010\"+\n\026Ga"
    "teCreateGroupRequest\022\021\n\tGroupName\030\001 \001(\t\""
    "Q\n\027GateCreateGroupResponse\022*\n\006header\030\001 \001"
    "(\0132\032.candy.meta.ResponseHeader\022\n\n\002ID\030\002 \001"
    "(\003\"5\n\023GateRegisterRequest\022\014\n\004User\030\001 \001(\t\022"
    "\020\n\010Password\030\002 \001(\t\"N\n\024GateRegisterRespons"
    "e\022*\n\006header\030\001 \001(\0132\032.candy.meta.ResponseH"
    "eader\022\n\n\002ID\030\002 \001(\003\"K\n\031GateUpdateUserInfoR"
    "equest\022\014\n\004User\030\001 \001(\t\022\020\n\010NickName\030\002 \001(\t\022\016"
    "\n\006Avatar\030\003 \001(\014\"T\n\032GateUpdateUserInfoResp"
    "onse\022*\n\006header\030\001 \001(\0132\032.candy.meta.Respon"
    "seHeader\022\n\n\002ID\030\002 \001(\003\"\?\n\035GateUpdateUserPa"
    "sswordRequest\022\014\n\004User\030\001 \001(\t\022\020\n\010Password\030"
    "\002 \001(\t\"X\n\036GateUpdateUserPasswordResponse\022"
    "*\n\006header\030\001 \001(\0132\032.candy.meta.ResponseHea"
    "der\022\n\n\002ID\030\002 \001(\003\"H\n\026GateGetUserInfoReques"
    "t\022\014\n\004type\030\001 \001(\005\022\020\n\010UserName\030\002 \001(\t\022\016\n\006Use"
    "rID\030\003 \001(\003\"\201\001\n\027GateGetUserInfoResponse\022*\n"
    "\006header\030\001 \001(\0132\032.candy.meta.ResponseHeade"
    "r\022\n\n\002ID\030\002 \001(\003\022\014\n\004User\030\003 \001(\t\022\020\n\010NickName\030"
    "\004 \001(\t\022\016\n\006Avatar\030\005 \001(\014\"\026\n\024GateHeartbeatRe"
    "quest\"\027\n\025GateHeartbeatResponse\"6\n\024GateUs"
    "erLoginRequest\022\014\n\004User\030\001 \001(\t\022\020\n\010Password"
    "\030\002 \001(\t\"O\n\025GateUserLoginResponse\022*\n\006heade"
    "r\030\001 \001(\0132\032.candy.meta.ResponseHeader\022\n\n\002I"
    "D\030\002 \001(\003\"\027\n\025GateUserLogoutRequest\"D\n\026Gate"
    "UserLogoutResponse\022*\n\006header\030\001 \001(\0132\032.can"
    "dy.meta.ResponseHeader\"%\n\025GateUploadFile"
    "Request\022\014\n\004File\030\001 \001(\014\"D\n\026GateUploadFileR"
    "esponse\022*\n\006header\030\001 \001(\0132\032.candy.meta.Res"
    "ponseHeader\"%\n\024GateCheckFileRequest\022\r\n\005N"
    "ames\030\001 \003(\t\"R\n\025GateCheckFileResponse\022*\n\006H"
    "eader\030\001 \001(\0132\032.candy.meta.ResponseHeader\022"
    "\r\n\005Names\030\002 \003(\t\"(\n\027GateDownloadFileReques"
    "t\022\r\n\005Names\030\001 \003(\t\"\264\001\n\030GateDownloadFileRes"
    "ponse\022*\n\006header\030\001 \001(\0132\032.candy.meta.Respo"
    "nseHeader\022>\n\005Files\030\002 \003(\0132/.candy.meta.Ga"
    "teDownloadFileResponse.FilesEntry\032,\n\nFil"
    "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\""
    "U\n\021GateNoticeRequest\022\036\n\002ID\030\001 \003(\0132\022.candy"
    ".meta.PushID\022 \n\003Msg\030\002 \001(\0132\023.candy.meta.M"
    "essage\"@\n\022GateNoticeResponse\022*\n\006header\030\001"
    " \001(\0132\032.candy.meta.ResponseHeader\"5\n\026Gate"
    "LoadMessageRequest\022\n\n\002ID\030\001 \001(\003\022\017\n\007Revers"
    "e\030\002 \001(\010\"h\n\027GateLoadMessageResponse\022*\n\006he"
    "ader\030\001 \001(\0132\032.candy.meta.ResponseHeader\022!"
    "\n\004Msgs\030\002 \003(\0132\023.candy.meta.Message\"\032\n\030Gat"
    "eLoadGroupListRequest\"j\n\031GateLoadGroupLi"
    "stResponse\022*\n\006header\030\001 \001(\0132\032.candy.meta."
    "ResponseHeader\022!\n\006groups\030\002 \003(\0132\021.candy.m"
    "eta.Group\"\033\n\031GateLoadFriendListRequest\"W"
    "\n\032GateLoadFriendListResponse\022*\n\006header\030\001"
    " \001(\0132\032.candy.meta.ResponseHeader\022\r\n\005user"
    "s\030\002 \003(\003\":\n\026GateSendMessageRequest\022 \n\003Msg"
    "\030\001 \001(\0132\023.candy.meta.Message\"E\n\027GateSendM"
    "essageResponse\022*\n\006header\030\001 \001(\0132\032.candy.m"
    "eta.ResponseHeader2\324\014\n\004Gate\022M\n\010Register\022"
    "\037.candy.meta.GateRegisterRequest\032 .candy"
    ".meta.GateRegisterResponse\022_\n\016UpdateUser"
    "Info\022%.candy.meta.GateUpdateUserInfoRequ"
    "est\032&.candy.meta.GateUpdateUserInfoRespo"
    "nse\022k\n\022UpdateUserPassword\022).candy.meta.G"
    "ateUpdateUserPasswordRequest\032*.candy.met"
    "a.GateUpdateUserPasswordResponse\022V\n\013GetU"
    "serInfo\022\".candy.meta.GateGetUserInfoRequ"
    "est\032#.candy.meta.GateGetUserInfoResponse"
    "\022L\n\005Login\022 .candy.meta.GateUserLoginRequ"
    "est\032!.candy.meta.GateUserLoginResponse\022O"
    "\n\006Logout\022!.candy.meta.GateUserLogoutRequ"
    "est\032\".candy.meta.GateUserLogoutResponse\022"
    "V\n\013SendMessage\022\".candy.meta.GateSendMess"
    "ageRequest\032#.candy.meta.GateSendMessageR"
    "esponse\0223\n\005Ready\022\023.candy.meta.Message\032\023."
    "candy.meta.Message0\001\022P\n\tAddFriend\022 .cand"
    "y.meta.GateAddFriendRequest\032!.candy.meta"
    ".GateAddFriendResponse\022M\n\010FindUser\022\037.can"
    "dy.meta.GateFindUserRequest\032 .candy.meta"
    ".GateFindUserResponse\022_\n\016LoadFriendList\022"
    "%.candy.meta.GateLoadFriendListRequest\032&"
    ".candy.meta.GateLoadFriendListResponse\022V"
    "\n\013CreateGroup\022\".candy.meta.GateCreateGro"
    "upRequest\032#.candy.meta.GateCreateGroupRe"
    "sponse\022\\\n\rLoadGroupList\022$.candy.meta.Gat"
    "eLoadGroupListRequest\032%.candy.meta.GateL"
    "oadGroupListResponse\022P\n\tHeartbeat\022 .cand"
    "y.meta.GateHeartbeatRequest\032!.candy.meta"
    ".GateHeartbeatResponse\022S\n\nUploadFile\022!.c"
    "andy.meta.GateUploadFileRequest\032\".candy."
    "meta.GateUploadFileResponse\022P\n\tCheckFile"
    "\022 .candy.meta.GateCheckFileRequest\032!.can"
    "dy.meta.GateCheckFileResponse\022Y\n\014Downloa"
    "dFile\022#.candy.meta.GateDownloadFileReque"
    "st\032$.candy.meta.GateDownloadFileResponse"
    "\022V\n\013LoadMessage\022\".candy.meta.GateLoadMes"
    "sageRequest\032#.candy.meta.GateLoadMessage"
    "Response\022G\n\006Notice\022\035.candy.meta.GateNoti"
    "ceRequest\032\036.candy.meta.GateNoticeRespons"
    "eB\006Z\004metab\006proto3", 4177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gate.proto", &protobuf_RegisterTypes);
  GateFindUserRequest::default_instance_ = new GateFindUserRequest();
  GateFindUserResponse::default_instance_ = new GateFindUserResponse();
  GateAddFriendRequest::default_instance_ = new GateAddFriendRequest();
  GateAddFriendResponse::default_instance_ = new GateAddFriendResponse();
  GateCreateGroupRequest::default_instance_ = new GateCreateGroupRequest();
  GateCreateGroupResponse::default_instance_ = new GateCreateGroupResponse();
  GateRegisterRequest::default_instance_ = new GateRegisterRequest();
  GateRegisterResponse::default_instance_ = new GateRegisterResponse();
  GateUpdateUserInfoRequest::default_instance_ = new GateUpdateUserInfoRequest();
  GateUpdateUserInfoResponse::default_instance_ = new GateUpdateUserInfoResponse();
  GateUpdateUserPasswordRequest::default_instance_ = new GateUpdateUserPasswordRequest();
  GateUpdateUserPasswordResponse::default_instance_ = new GateUpdateUserPasswordResponse();
  GateGetUserInfoRequest::default_instance_ = new GateGetUserInfoRequest();
  GateGetUserInfoResponse::default_instance_ = new GateGetUserInfoResponse();
  GateHeartbeatRequest::default_instance_ = new GateHeartbeatRequest();
  GateHeartbeatResponse::default_instance_ = new GateHeartbeatResponse();
  GateUserLoginRequest::default_instance_ = new GateUserLoginRequest();
  GateUserLoginResponse::default_instance_ = new GateUserLoginResponse();
  GateUserLogoutRequest::default_instance_ = new GateUserLogoutRequest();
  GateUserLogoutResponse::default_instance_ = new GateUserLogoutResponse();
  GateUploadFileRequest::default_instance_ = new GateUploadFileRequest();
  GateUploadFileResponse::default_instance_ = new GateUploadFileResponse();
  GateCheckFileRequest::default_instance_ = new GateCheckFileRequest();
  GateCheckFileResponse::default_instance_ = new GateCheckFileResponse();
  GateDownloadFileRequest::default_instance_ = new GateDownloadFileRequest();
  GateDownloadFileResponse::default_instance_ = new GateDownloadFileResponse();
  GateNoticeRequest::default_instance_ = new GateNoticeRequest();
  GateNoticeResponse::default_instance_ = new GateNoticeResponse();
  GateLoadMessageRequest::default_instance_ = new GateLoadMessageRequest();
  GateLoadMessageResponse::default_instance_ = new GateLoadMessageResponse();
  GateLoadGroupListRequest::default_instance_ = new GateLoadGroupListRequest();
  GateLoadGroupListResponse::default_instance_ = new GateLoadGroupListResponse();
  GateLoadFriendListRequest::default_instance_ = new GateLoadFriendListRequest();
  GateLoadFriendListResponse::default_instance_ = new GateLoadFriendListResponse();
  GateSendMessageRequest::default_instance_ = new GateSendMessageRequest();
  GateSendMessageResponse::default_instance_ = new GateSendMessageResponse();
  GateFindUserRequest::default_instance_->InitAsDefaultInstance();
  GateFindUserResponse::default_instance_->InitAsDefaultInstance();
  GateAddFriendRequest::default_instance_->InitAsDefaultInstance();
  GateAddFriendResponse::default_instance_->InitAsDefaultInstance();
  GateCreateGroupRequest::default_instance_->InitAsDefaultInstance();
  GateCreateGroupResponse::default_instance_->InitAsDefaultInstance();
  GateRegisterRequest::default_instance_->InitAsDefaultInstance();
  GateRegisterResponse::default_instance_->InitAsDefaultInstance();
  GateUpdateUserInfoRequest::default_instance_->InitAsDefaultInstance();
  GateUpdateUserInfoResponse::default_instance_->InitAsDefaultInstance();
  GateUpdateUserPasswordRequest::default_instance_->InitAsDefaultInstance();
  GateUpdateUserPasswordResponse::default_instance_->InitAsDefaultInstance();
  GateGetUserInfoRequest::default_instance_->InitAsDefaultInstance();
  GateGetUserInfoResponse::default_instance_->InitAsDefaultInstance();
  GateHeartbeatRequest::default_instance_->InitAsDefaultInstance();
  GateHeartbeatResponse::default_instance_->InitAsDefaultInstance();
  GateUserLoginRequest::default_instance_->InitAsDefaultInstance();
  GateUserLoginResponse::default_instance_->InitAsDefaultInstance();
  GateUserLogoutRequest::default_instance_->InitAsDefaultInstance();
  GateUserLogoutResponse::default_instance_->InitAsDefaultInstance();
  GateUploadFileRequest::default_instance_->InitAsDefaultInstance();
  GateUploadFileResponse::default_instance_->InitAsDefaultInstance();
  GateCheckFileRequest::default_instance_->InitAsDefaultInstance();
  GateCheckFileResponse::default_instance_->InitAsDefaultInstance();
  GateDownloadFileRequest::default_instance_->InitAsDefaultInstance();
  GateDownloadFileResponse::default_instance_->InitAsDefaultInstance();
  GateNoticeRequest::default_instance_->InitAsDefaultInstance();
  GateNoticeResponse::default_instance_->InitAsDefaultInstance();
  GateLoadMessageRequest::default_instance_->InitAsDefaultInstance();
  GateLoadMessageResponse::default_instance_->InitAsDefaultInstance();
  GateLoadGroupListRequest::default_instance_->InitAsDefaultInstance();
  GateLoadGroupListResponse::default_instance_->InitAsDefaultInstance();
  GateLoadFriendListRequest::default_instance_->InitAsDefaultInstance();
  GateLoadFriendListResponse::default_instance_->InitAsDefaultInstance();
  GateSendMessageRequest::default_instance_->InitAsDefaultInstance();
  GateSendMessageResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gate_2eproto {
  StaticDescriptorInitializer_gate_2eproto() {
    protobuf_AddDesc_gate_2eproto();
  }
} static_descriptor_initializer_gate_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GateFindUserRequest::kUserFieldNumber;
#endif  // !_MSC_VER

GateFindUserRequest::GateFindUserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateFindUserRequest)
}

void GateFindUserRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateFindUserRequest::GateFindUserRequest(const GateFindUserRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateFindUserRequest)
}

void GateFindUserRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateFindUserRequest::~GateFindUserRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateFindUserRequest)
  SharedDtor();
}

void GateFindUserRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateFindUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateFindUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateFindUserRequest_descriptor_;
}

const GateFindUserRequest& GateFindUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateFindUserRequest* GateFindUserRequest::default_instance_ = NULL;

GateFindUserRequest* GateFindUserRequest::New(::google::protobuf::Arena* arena) const {
  GateFindUserRequest* n = new GateFindUserRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateFindUserRequest::Clear() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateFindUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateFindUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string User = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateFindUserRequest.User"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateFindUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateFindUserRequest)
  return false;
#undef DO_
}

void GateFindUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateFindUserRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateFindUserRequest.User");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateFindUserRequest)
}

::google::protobuf::uint8* GateFindUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateFindUserRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateFindUserRequest.User");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateFindUserRequest)
  return target;
}

int GateFindUserRequest::ByteSize() const {
  int total_size = 0;

  // optional string User = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateFindUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateFindUserRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateFindUserRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateFindUserRequest::MergeFrom(const GateFindUserRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void GateFindUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateFindUserRequest::CopyFrom(const GateFindUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateFindUserRequest::IsInitialized() const {

  return true;
}

void GateFindUserRequest::Swap(GateFindUserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateFindUserRequest::InternalSwap(GateFindUserRequest* other) {
  user_.Swap(&other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateFindUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateFindUserRequest_descriptor_;
  metadata.reflection = GateFindUserRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateFindUserRequest

// optional string User = 1;
void GateFindUserRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateFindUserRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateFindUserRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateFindUserRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateFindUserRequest.User)
}
 void GateFindUserRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateFindUserRequest.User)
}
 void GateFindUserRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateFindUserRequest.User)
}
 ::std::string* GateFindUserRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateFindUserRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateFindUserRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateFindUserRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateFindUserRequest.User)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateFindUserResponse::kHeaderFieldNumber;
const int GateFindUserResponse::kUsersFieldNumber;
#endif  // !_MSC_VER

GateFindUserResponse::GateFindUserResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateFindUserResponse)
}

void GateFindUserResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateFindUserResponse::GateFindUserResponse(const GateFindUserResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateFindUserResponse)
}

void GateFindUserResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
}

GateFindUserResponse::~GateFindUserResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateFindUserResponse)
  SharedDtor();
}

void GateFindUserResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateFindUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateFindUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateFindUserResponse_descriptor_;
}

const GateFindUserResponse& GateFindUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateFindUserResponse* GateFindUserResponse::default_instance_ = NULL;

GateFindUserResponse* GateFindUserResponse::New(::google::protobuf::Arena* arena) const {
  GateFindUserResponse* n = new GateFindUserResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateFindUserResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  users_.Clear();
}

bool GateFindUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateFindUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated string users = 2;
      case 2: {
        if (tag == 18) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_users()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->users(this->users_size() - 1).data(),
            this->users(this->users_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateFindUserResponse.users"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateFindUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateFindUserResponse)
  return false;
#undef DO_
}

void GateFindUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateFindUserResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->users(i).data(), this->users(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateFindUserResponse.users");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateFindUserResponse)
}

::google::protobuf::uint8* GateFindUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateFindUserResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // repeated string users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->users(i).data(), this->users(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateFindUserResponse.users");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->users(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateFindUserResponse)
  return target;
}

int GateFindUserResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated string users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->users(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateFindUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateFindUserResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateFindUserResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateFindUserResponse::MergeFrom(const GateFindUserResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  users_.MergeFrom(from.users_);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateFindUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateFindUserResponse::CopyFrom(const GateFindUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateFindUserResponse::IsInitialized() const {

  return true;
}

void GateFindUserResponse::Swap(GateFindUserResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateFindUserResponse::InternalSwap(GateFindUserResponse* other) {
  std::swap(header_, other->header_);
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateFindUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateFindUserResponse_descriptor_;
  metadata.reflection = GateFindUserResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateFindUserResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateFindUserResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateFindUserResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateFindUserResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateFindUserResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateFindUserResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateFindUserResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateFindUserResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateFindUserResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateFindUserResponse.header)
}

// repeated string users = 2;
int GateFindUserResponse::users_size() const {
  return users_.size();
}
void GateFindUserResponse::clear_users() {
  users_.Clear();
}
 const ::std::string& GateFindUserResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateFindUserResponse.users)
  return users_.Get(index);
}
 ::std::string* GateFindUserResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateFindUserResponse.users)
  return users_.Mutable(index);
}
 void GateFindUserResponse::set_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateFindUserResponse.users)
  users_.Mutable(index)->assign(value);
}
 void GateFindUserResponse::set_users(int index, const char* value) {
  users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateFindUserResponse.users)
}
 void GateFindUserResponse::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateFindUserResponse.users)
}
 ::std::string* GateFindUserResponse::add_users() {
  return users_.Add();
}
 void GateFindUserResponse::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateFindUserResponse.users)
}
 void GateFindUserResponse::add_users(const char* value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateFindUserResponse.users)
}
 void GateFindUserResponse::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateFindUserResponse.users)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateFindUserResponse::users() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateFindUserResponse.users)
  return users_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GateFindUserResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateFindUserResponse.users)
  return &users_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateAddFriendRequest::kUserIDFieldNumber;
const int GateAddFriendRequest::kConfirmFieldNumber;
const int GateAddFriendRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

GateAddFriendRequest::GateAddFriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateAddFriendRequest)
}

void GateAddFriendRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateAddFriendRequest::GateAddFriendRequest(const GateAddFriendRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateAddFriendRequest)
}

void GateAddFriendRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  confirm_ = false;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateAddFriendRequest::~GateAddFriendRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateAddFriendRequest)
  SharedDtor();
}

void GateAddFriendRequest::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateAddFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateAddFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateAddFriendRequest_descriptor_;
}

const GateAddFriendRequest& GateAddFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateAddFriendRequest* GateAddFriendRequest::default_instance_ = NULL;

GateAddFriendRequest* GateAddFriendRequest::New(::google::protobuf::Arena* arena) const {
  GateAddFriendRequest* n = new GateAddFriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateAddFriendRequest::Clear() {
  userid_ = GOOGLE_LONGLONG(0);
  confirm_ = false;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateAddFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateAddFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Confirm;
        break;
      }

      // optional bool Confirm = 2;
      case 2: {
        if (tag == 16) {
         parse_Confirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &confirm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Msg;
        break;
      }

      // optional string Msg = 3;
      case 3: {
        if (tag == 26) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateAddFriendRequest.Msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateAddFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateAddFriendRequest)
  return false;
#undef DO_
}

void GateAddFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateAddFriendRequest)
  // optional int64 UserID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // optional bool Confirm = 2;
  if (this->confirm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->confirm(), output);
  }

  // optional string Msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateAddFriendRequest.Msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateAddFriendRequest)
}

::google::protobuf::uint8* GateAddFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateAddFriendRequest)
  // optional int64 UserID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // optional bool Confirm = 2;
  if (this->confirm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->confirm(), target);
  }

  // optional string Msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateAddFriendRequest.Msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateAddFriendRequest)
  return target;
}

int GateAddFriendRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // optional bool Confirm = 2;
  if (this->confirm() != 0) {
    total_size += 1 + 1;
  }

  // optional string Msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateAddFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateAddFriendRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateAddFriendRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateAddFriendRequest::MergeFrom(const GateAddFriendRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.confirm() != 0) {
    set_confirm(from.confirm());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GateAddFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateAddFriendRequest::CopyFrom(const GateAddFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateAddFriendRequest::IsInitialized() const {

  return true;
}

void GateAddFriendRequest::Swap(GateAddFriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateAddFriendRequest::InternalSwap(GateAddFriendRequest* other) {
  std::swap(userid_, other->userid_);
  std::swap(confirm_, other->confirm_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateAddFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateAddFriendRequest_descriptor_;
  metadata.reflection = GateAddFriendRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateAddFriendRequest

// optional int64 UserID = 1;
void GateAddFriendRequest::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateAddFriendRequest::userid() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendRequest.UserID)
  return userid_;
}
 void GateAddFriendRequest::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendRequest.UserID)
}

// optional bool Confirm = 2;
void GateAddFriendRequest::clear_confirm() {
  confirm_ = false;
}
 bool GateAddFriendRequest::confirm() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendRequest.Confirm)
  return confirm_;
}
 void GateAddFriendRequest::set_confirm(bool value) {
  
  confirm_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendRequest.Confirm)
}

// optional string Msg = 3;
void GateAddFriendRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateAddFriendRequest::msg() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendRequest.Msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateAddFriendRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendRequest.Msg)
}
 void GateAddFriendRequest::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateAddFriendRequest.Msg)
}
 void GateAddFriendRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateAddFriendRequest.Msg)
}
 ::std::string* GateAddFriendRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateAddFriendRequest.Msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateAddFriendRequest::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateAddFriendRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateAddFriendRequest.Msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateAddFriendResponse::kHeaderFieldNumber;
const int GateAddFriendResponse::kConfirmFieldNumber;
#endif  // !_MSC_VER

GateAddFriendResponse::GateAddFriendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateAddFriendResponse)
}

void GateAddFriendResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateAddFriendResponse::GateAddFriendResponse(const GateAddFriendResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateAddFriendResponse)
}

void GateAddFriendResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  confirm_ = false;
}

GateAddFriendResponse::~GateAddFriendResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateAddFriendResponse)
  SharedDtor();
}

void GateAddFriendResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateAddFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateAddFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateAddFriendResponse_descriptor_;
}

const GateAddFriendResponse& GateAddFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateAddFriendResponse* GateAddFriendResponse::default_instance_ = NULL;

GateAddFriendResponse* GateAddFriendResponse::New(::google::protobuf::Arena* arena) const {
  GateAddFriendResponse* n = new GateAddFriendResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateAddFriendResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  confirm_ = false;
}

bool GateAddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateAddFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Confirm;
        break;
      }

      // optional bool Confirm = 2;
      case 2: {
        if (tag == 16) {
         parse_Confirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &confirm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateAddFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateAddFriendResponse)
  return false;
#undef DO_
}

void GateAddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateAddFriendResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bool Confirm = 2;
  if (this->confirm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->confirm(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateAddFriendResponse)
}

::google::protobuf::uint8* GateAddFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateAddFriendResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional bool Confirm = 2;
  if (this->confirm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->confirm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateAddFriendResponse)
  return target;
}

int GateAddFriendResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bool Confirm = 2;
  if (this->confirm() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateAddFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateAddFriendResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateAddFriendResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateAddFriendResponse::MergeFrom(const GateAddFriendResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
  if (from.confirm() != 0) {
    set_confirm(from.confirm());
  }
}

void GateAddFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateAddFriendResponse::CopyFrom(const GateAddFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateAddFriendResponse::IsInitialized() const {

  return true;
}

void GateAddFriendResponse::Swap(GateAddFriendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateAddFriendResponse::InternalSwap(GateAddFriendResponse* other) {
  std::swap(header_, other->header_);
  std::swap(confirm_, other->confirm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateAddFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateAddFriendResponse_descriptor_;
  metadata.reflection = GateAddFriendResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateAddFriendResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateAddFriendResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateAddFriendResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateAddFriendResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateAddFriendResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateAddFriendResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateAddFriendResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateAddFriendResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateAddFriendResponse.header)
}

// optional bool Confirm = 2;
void GateAddFriendResponse::clear_confirm() {
  confirm_ = false;
}
 bool GateAddFriendResponse::confirm() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendResponse.Confirm)
  return confirm_;
}
 void GateAddFriendResponse::set_confirm(bool value) {
  
  confirm_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendResponse.Confirm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateCreateGroupRequest::kGroupNameFieldNumber;
#endif  // !_MSC_VER

GateCreateGroupRequest::GateCreateGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateCreateGroupRequest)
}

void GateCreateGroupRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateCreateGroupRequest::GateCreateGroupRequest(const GateCreateGroupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateCreateGroupRequest)
}

void GateCreateGroupRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateCreateGroupRequest::~GateCreateGroupRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateCreateGroupRequest)
  SharedDtor();
}

void GateCreateGroupRequest::SharedDtor() {
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateCreateGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateCreateGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateCreateGroupRequest_descriptor_;
}

const GateCreateGroupRequest& GateCreateGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateCreateGroupRequest* GateCreateGroupRequest::default_instance_ = NULL;

GateCreateGroupRequest* GateCreateGroupRequest::New(::google::protobuf::Arena* arena) const {
  GateCreateGroupRequest* n = new GateCreateGroupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateCreateGroupRequest::Clear() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateCreateGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateCreateGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateCreateGroupRequest.GroupName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateCreateGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateCreateGroupRequest)
  return false;
#undef DO_
}

void GateCreateGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateCreateGroupRequest)
  // optional string GroupName = 1;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateCreateGroupRequest.GroupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupname(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateCreateGroupRequest)
}

::google::protobuf::uint8* GateCreateGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateCreateGroupRequest)
  // optional string GroupName = 1;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateCreateGroupRequest.GroupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateCreateGroupRequest)
  return target;
}

int GateCreateGroupRequest::ByteSize() const {
  int total_size = 0;

  // optional string GroupName = 1;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateCreateGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateCreateGroupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateCreateGroupRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateCreateGroupRequest::MergeFrom(const GateCreateGroupRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
}

void GateCreateGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateCreateGroupRequest::CopyFrom(const GateCreateGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateCreateGroupRequest::IsInitialized() const {

  return true;
}

void GateCreateGroupRequest::Swap(GateCreateGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateCreateGroupRequest::InternalSwap(GateCreateGroupRequest* other) {
  groupname_.Swap(&other->groupname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateCreateGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateCreateGroupRequest_descriptor_;
  metadata.reflection = GateCreateGroupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateCreateGroupRequest

// optional string GroupName = 1;
void GateCreateGroupRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateCreateGroupRequest::groupname() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCreateGroupRequest.GroupName)
  return groupname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateCreateGroupRequest::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateCreateGroupRequest.GroupName)
}
 void GateCreateGroupRequest::set_groupname(const char* value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateCreateGroupRequest.GroupName)
}
 void GateCreateGroupRequest::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateCreateGroupRequest.GroupName)
}
 ::std::string* GateCreateGroupRequest::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCreateGroupRequest.GroupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateCreateGroupRequest::release_groupname() {
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateCreateGroupRequest::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateCreateGroupRequest.GroupName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateCreateGroupResponse::kHeaderFieldNumber;
const int GateCreateGroupResponse::kIDFieldNumber;
#endif  // !_MSC_VER

GateCreateGroupResponse::GateCreateGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateCreateGroupResponse)
}

void GateCreateGroupResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateCreateGroupResponse::GateCreateGroupResponse(const GateCreateGroupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateCreateGroupResponse)
}

void GateCreateGroupResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

GateCreateGroupResponse::~GateCreateGroupResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateCreateGroupResponse)
  SharedDtor();
}

void GateCreateGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateCreateGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateCreateGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateCreateGroupResponse_descriptor_;
}

const GateCreateGroupResponse& GateCreateGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateCreateGroupResponse* GateCreateGroupResponse::default_instance_ = NULL;

GateCreateGroupResponse* GateCreateGroupResponse::New(::google::protobuf::Arena* arena) const {
  GateCreateGroupResponse* n = new GateCreateGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateCreateGroupResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool GateCreateGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateCreateGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateCreateGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateCreateGroupResponse)
  return false;
#undef DO_
}

void GateCreateGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateCreateGroupResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateCreateGroupResponse)
}

::google::protobuf::uint8* GateCreateGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateCreateGroupResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateCreateGroupResponse)
  return target;
}

int GateCreateGroupResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateCreateGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateCreateGroupResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateCreateGroupResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateCreateGroupResponse::MergeFrom(const GateCreateGroupResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GateCreateGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateCreateGroupResponse::CopyFrom(const GateCreateGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateCreateGroupResponse::IsInitialized() const {

  return true;
}

void GateCreateGroupResponse::Swap(GateCreateGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateCreateGroupResponse::InternalSwap(GateCreateGroupResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateCreateGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateCreateGroupResponse_descriptor_;
  metadata.reflection = GateCreateGroupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateCreateGroupResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateCreateGroupResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateCreateGroupResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateCreateGroupResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCreateGroupResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateCreateGroupResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCreateGroupResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateCreateGroupResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateCreateGroupResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateCreateGroupResponse.header)
}

// optional int64 ID = 2;
void GateCreateGroupResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateCreateGroupResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCreateGroupResponse.ID)
  return id_;
}
 void GateCreateGroupResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateCreateGroupResponse.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateRegisterRequest::kUserFieldNumber;
const int GateRegisterRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

GateRegisterRequest::GateRegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateRegisterRequest)
}

void GateRegisterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateRegisterRequest::GateRegisterRequest(const GateRegisterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateRegisterRequest)
}

void GateRegisterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateRegisterRequest::~GateRegisterRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateRegisterRequest)
  SharedDtor();
}

void GateRegisterRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRegisterRequest_descriptor_;
}

const GateRegisterRequest& GateRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateRegisterRequest* GateRegisterRequest::default_instance_ = NULL;

GateRegisterRequest* GateRegisterRequest::New(::google::protobuf::Arena* arena) const {
  GateRegisterRequest* n = new GateRegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateRegisterRequest::Clear() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateRegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string User = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateRegisterRequest.User"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // optional string Password = 2;
      case 2: {
        if (tag == 18) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateRegisterRequest.Password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateRegisterRequest)
  return false;
#undef DO_
}

void GateRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateRegisterRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateRegisterRequest.User");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateRegisterRequest.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateRegisterRequest)
}

::google::protobuf::uint8* GateRegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateRegisterRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateRegisterRequest.User");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateRegisterRequest.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateRegisterRequest)
  return target;
}

int GateRegisterRequest::ByteSize() const {
  int total_size = 0;

  // optional string User = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateRegisterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateRegisterRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRegisterRequest::MergeFrom(const GateRegisterRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void GateRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRegisterRequest::CopyFrom(const GateRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRegisterRequest::IsInitialized() const {

  return true;
}

void GateRegisterRequest::Swap(GateRegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateRegisterRequest::InternalSwap(GateRegisterRequest* other) {
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRegisterRequest_descriptor_;
  metadata.reflection = GateRegisterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateRegisterRequest

// optional string User = 1;
void GateRegisterRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateRegisterRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateRegisterRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateRegisterRequest.User)
}
 void GateRegisterRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateRegisterRequest.User)
}
 void GateRegisterRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateRegisterRequest.User)
}
 ::std::string* GateRegisterRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateRegisterRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateRegisterRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateRegisterRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateRegisterRequest.User)
}

// optional string Password = 2;
void GateRegisterRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateRegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterRequest.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateRegisterRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateRegisterRequest.Password)
}
 void GateRegisterRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateRegisterRequest.Password)
}
 void GateRegisterRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateRegisterRequest.Password)
}
 ::std::string* GateRegisterRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateRegisterRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateRegisterRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateRegisterRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateRegisterRequest.Password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateRegisterResponse::kHeaderFieldNumber;
const int GateRegisterResponse::kIDFieldNumber;
#endif  // !_MSC_VER

GateRegisterResponse::GateRegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateRegisterResponse)
}

void GateRegisterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateRegisterResponse::GateRegisterResponse(const GateRegisterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateRegisterResponse)
}

void GateRegisterResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

GateRegisterResponse::~GateRegisterResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateRegisterResponse)
  SharedDtor();
}

void GateRegisterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRegisterResponse_descriptor_;
}

const GateRegisterResponse& GateRegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateRegisterResponse* GateRegisterResponse::default_instance_ = NULL;

GateRegisterResponse* GateRegisterResponse::New(::google::protobuf::Arena* arena) const {
  GateRegisterResponse* n = new GateRegisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateRegisterResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool GateRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateRegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateRegisterResponse)
  return false;
#undef DO_
}

void GateRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateRegisterResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateRegisterResponse)
}

::google::protobuf::uint8* GateRegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateRegisterResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateRegisterResponse)
  return target;
}

int GateRegisterResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateRegisterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateRegisterResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRegisterResponse::MergeFrom(const GateRegisterResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GateRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRegisterResponse::CopyFrom(const GateRegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRegisterResponse::IsInitialized() const {

  return true;
}

void GateRegisterResponse::Swap(GateRegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateRegisterResponse::InternalSwap(GateRegisterResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateRegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRegisterResponse_descriptor_;
  metadata.reflection = GateRegisterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateRegisterResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateRegisterResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateRegisterResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateRegisterResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateRegisterResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateRegisterResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateRegisterResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateRegisterResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateRegisterResponse.header)
}

// optional int64 ID = 2;
void GateRegisterResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateRegisterResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterResponse.ID)
  return id_;
}
 void GateRegisterResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateRegisterResponse.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUpdateUserInfoRequest::kUserFieldNumber;
const int GateUpdateUserInfoRequest::kNickNameFieldNumber;
const int GateUpdateUserInfoRequest::kAvatarFieldNumber;
#endif  // !_MSC_VER

GateUpdateUserInfoRequest::GateUpdateUserInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUpdateUserInfoRequest)
}

void GateUpdateUserInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateUpdateUserInfoRequest::GateUpdateUserInfoRequest(const GateUpdateUserInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUpdateUserInfoRequest)
}

void GateUpdateUserInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateUpdateUserInfoRequest::~GateUpdateUserInfoRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUpdateUserInfoRequest)
  SharedDtor();
}

void GateUpdateUserInfoRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateUpdateUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUpdateUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUpdateUserInfoRequest_descriptor_;
}

const GateUpdateUserInfoRequest& GateUpdateUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUpdateUserInfoRequest* GateUpdateUserInfoRequest::default_instance_ = NULL;

GateUpdateUserInfoRequest* GateUpdateUserInfoRequest::New(::google::protobuf::Arena* arena) const {
  GateUpdateUserInfoRequest* n = new GateUpdateUserInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUpdateUserInfoRequest::Clear() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateUpdateUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUpdateUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string User = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateUpdateUserInfoRequest.User"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // optional string NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateUpdateUserInfoRequest.NickName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Avatar;
        break;
      }

      // optional bytes Avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_Avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUpdateUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUpdateUserInfoRequest)
  return false;
#undef DO_
}

void GateUpdateUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUpdateUserInfoRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserInfoRequest.User");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string NickName = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserInfoRequest.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional bytes Avatar = 3;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->avatar(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUpdateUserInfoRequest)
}

::google::protobuf::uint8* GateUpdateUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUpdateUserInfoRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserInfoRequest.User");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string NickName = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserInfoRequest.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional bytes Avatar = 3;
  if (this->avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->avatar(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUpdateUserInfoRequest)
  return target;
}

int GateUpdateUserInfoRequest::ByteSize() const {
  int total_size = 0;

  // optional string User = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string NickName = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional bytes Avatar = 3;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatar());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUpdateUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUpdateUserInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUpdateUserInfoRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUpdateUserInfoRequest::MergeFrom(const GateUpdateUserInfoRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
}

void GateUpdateUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUpdateUserInfoRequest::CopyFrom(const GateUpdateUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUpdateUserInfoRequest::IsInitialized() const {

  return true;
}

void GateUpdateUserInfoRequest::Swap(GateUpdateUserInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUpdateUserInfoRequest::InternalSwap(GateUpdateUserInfoRequest* other) {
  user_.Swap(&other->user_);
  nickname_.Swap(&other->nickname_);
  avatar_.Swap(&other->avatar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUpdateUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUpdateUserInfoRequest_descriptor_;
  metadata.reflection = GateUpdateUserInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUpdateUserInfoRequest

// optional string User = 1;
void GateUpdateUserInfoRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUpdateUserInfoRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserInfoRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoRequest.User)
}
 void GateUpdateUserInfoRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserInfoRequest.User)
}
 void GateUpdateUserInfoRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserInfoRequest.User)
}
 ::std::string* GateUpdateUserInfoRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUpdateUserInfoRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserInfoRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoRequest.User)
}

// optional string NickName = 2;
void GateUpdateUserInfoRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUpdateUserInfoRequest::nickname() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoRequest.NickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserInfoRequest::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoRequest.NickName)
}
 void GateUpdateUserInfoRequest::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserInfoRequest.NickName)
}
 void GateUpdateUserInfoRequest::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserInfoRequest.NickName)
}
 ::std::string* GateUpdateUserInfoRequest::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoRequest.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUpdateUserInfoRequest::release_nickname() {
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserInfoRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoRequest.NickName)
}

// optional bytes Avatar = 3;
void GateUpdateUserInfoRequest::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUpdateUserInfoRequest::avatar() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoRequest.Avatar)
  return avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserInfoRequest::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoRequest.Avatar)
}
 void GateUpdateUserInfoRequest::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserInfoRequest.Avatar)
}
 void GateUpdateUserInfoRequest::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserInfoRequest.Avatar)
}
 ::std::string* GateUpdateUserInfoRequest::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoRequest.Avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUpdateUserInfoRequest::release_avatar() {
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserInfoRequest::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoRequest.Avatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUpdateUserInfoResponse::kHeaderFieldNumber;
const int GateUpdateUserInfoResponse::kIDFieldNumber;
#endif  // !_MSC_VER

GateUpdateUserInfoResponse::GateUpdateUserInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUpdateUserInfoResponse)
}

void GateUpdateUserInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateUpdateUserInfoResponse::GateUpdateUserInfoResponse(const GateUpdateUserInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUpdateUserInfoResponse)
}

void GateUpdateUserInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

GateUpdateUserInfoResponse::~GateUpdateUserInfoResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUpdateUserInfoResponse)
  SharedDtor();
}

void GateUpdateUserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateUpdateUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUpdateUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUpdateUserInfoResponse_descriptor_;
}

const GateUpdateUserInfoResponse& GateUpdateUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUpdateUserInfoResponse* GateUpdateUserInfoResponse::default_instance_ = NULL;

GateUpdateUserInfoResponse* GateUpdateUserInfoResponse::New(::google::protobuf::Arena* arena) const {
  GateUpdateUserInfoResponse* n = new GateUpdateUserInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUpdateUserInfoResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool GateUpdateUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUpdateUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUpdateUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUpdateUserInfoResponse)
  return false;
#undef DO_
}

void GateUpdateUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUpdateUserInfoResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUpdateUserInfoResponse)
}

::google::protobuf::uint8* GateUpdateUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUpdateUserInfoResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUpdateUserInfoResponse)
  return target;
}

int GateUpdateUserInfoResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUpdateUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUpdateUserInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUpdateUserInfoResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUpdateUserInfoResponse::MergeFrom(const GateUpdateUserInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GateUpdateUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUpdateUserInfoResponse::CopyFrom(const GateUpdateUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUpdateUserInfoResponse::IsInitialized() const {

  return true;
}

void GateUpdateUserInfoResponse::Swap(GateUpdateUserInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUpdateUserInfoResponse::InternalSwap(GateUpdateUserInfoResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUpdateUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUpdateUserInfoResponse_descriptor_;
  metadata.reflection = GateUpdateUserInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUpdateUserInfoResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateUpdateUserInfoResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateUpdateUserInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateUpdateUserInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateUpdateUserInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateUpdateUserInfoResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateUpdateUserInfoResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoResponse.header)
}

// optional int64 ID = 2;
void GateUpdateUserInfoResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateUpdateUserInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoResponse.ID)
  return id_;
}
 void GateUpdateUserInfoResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoResponse.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUpdateUserPasswordRequest::kUserFieldNumber;
const int GateUpdateUserPasswordRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

GateUpdateUserPasswordRequest::GateUpdateUserPasswordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUpdateUserPasswordRequest)
}

void GateUpdateUserPasswordRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateUpdateUserPasswordRequest::GateUpdateUserPasswordRequest(const GateUpdateUserPasswordRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUpdateUserPasswordRequest)
}

void GateUpdateUserPasswordRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateUpdateUserPasswordRequest::~GateUpdateUserPasswordRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUpdateUserPasswordRequest)
  SharedDtor();
}

void GateUpdateUserPasswordRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateUpdateUserPasswordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUpdateUserPasswordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUpdateUserPasswordRequest_descriptor_;
}

const GateUpdateUserPasswordRequest& GateUpdateUserPasswordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUpdateUserPasswordRequest* GateUpdateUserPasswordRequest::default_instance_ = NULL;

GateUpdateUserPasswordRequest* GateUpdateUserPasswordRequest::New(::google::protobuf::Arena* arena) const {
  GateUpdateUserPasswordRequest* n = new GateUpdateUserPasswordRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUpdateUserPasswordRequest::Clear() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateUpdateUserPasswordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUpdateUserPasswordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string User = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateUpdateUserPasswordRequest.User"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // optional string Password = 2;
      case 2: {
        if (tag == 18) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateUpdateUserPasswordRequest.Password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUpdateUserPasswordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUpdateUserPasswordRequest)
  return false;
#undef DO_
}

void GateUpdateUserPasswordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUpdateUserPasswordRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserPasswordRequest.User");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserPasswordRequest.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUpdateUserPasswordRequest)
}

::google::protobuf::uint8* GateUpdateUserPasswordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUpdateUserPasswordRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserPasswordRequest.User");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUpdateUserPasswordRequest.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUpdateUserPasswordRequest)
  return target;
}

int GateUpdateUserPasswordRequest::ByteSize() const {
  int total_size = 0;

  // optional string User = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUpdateUserPasswordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUpdateUserPasswordRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUpdateUserPasswordRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUpdateUserPasswordRequest::MergeFrom(const GateUpdateUserPasswordRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void GateUpdateUserPasswordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUpdateUserPasswordRequest::CopyFrom(const GateUpdateUserPasswordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUpdateUserPasswordRequest::IsInitialized() const {

  return true;
}

void GateUpdateUserPasswordRequest::Swap(GateUpdateUserPasswordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUpdateUserPasswordRequest::InternalSwap(GateUpdateUserPasswordRequest* other) {
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUpdateUserPasswordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUpdateUserPasswordRequest_descriptor_;
  metadata.reflection = GateUpdateUserPasswordRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUpdateUserPasswordRequest

// optional string User = 1;
void GateUpdateUserPasswordRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUpdateUserPasswordRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserPasswordRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserPasswordRequest.User)
}
 void GateUpdateUserPasswordRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserPasswordRequest.User)
}
 void GateUpdateUserPasswordRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserPasswordRequest.User)
}
 ::std::string* GateUpdateUserPasswordRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserPasswordRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUpdateUserPasswordRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserPasswordRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserPasswordRequest.User)
}

// optional string Password = 2;
void GateUpdateUserPasswordRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUpdateUserPasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordRequest.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserPasswordRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserPasswordRequest.Password)
}
 void GateUpdateUserPasswordRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserPasswordRequest.Password)
}
 void GateUpdateUserPasswordRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserPasswordRequest.Password)
}
 ::std::string* GateUpdateUserPasswordRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserPasswordRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUpdateUserPasswordRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUpdateUserPasswordRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserPasswordRequest.Password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUpdateUserPasswordResponse::kHeaderFieldNumber;
const int GateUpdateUserPasswordResponse::kIDFieldNumber;
#endif  // !_MSC_VER

GateUpdateUserPasswordResponse::GateUpdateUserPasswordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUpdateUserPasswordResponse)
}

void GateUpdateUserPasswordResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateUpdateUserPasswordResponse::GateUpdateUserPasswordResponse(const GateUpdateUserPasswordResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUpdateUserPasswordResponse)
}

void GateUpdateUserPasswordResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

GateUpdateUserPasswordResponse::~GateUpdateUserPasswordResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUpdateUserPasswordResponse)
  SharedDtor();
}

void GateUpdateUserPasswordResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateUpdateUserPasswordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUpdateUserPasswordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUpdateUserPasswordResponse_descriptor_;
}

const GateUpdateUserPasswordResponse& GateUpdateUserPasswordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUpdateUserPasswordResponse* GateUpdateUserPasswordResponse::default_instance_ = NULL;

GateUpdateUserPasswordResponse* GateUpdateUserPasswordResponse::New(::google::protobuf::Arena* arena) const {
  GateUpdateUserPasswordResponse* n = new GateUpdateUserPasswordResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUpdateUserPasswordResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool GateUpdateUserPasswordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUpdateUserPasswordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUpdateUserPasswordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUpdateUserPasswordResponse)
  return false;
#undef DO_
}

void GateUpdateUserPasswordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUpdateUserPasswordResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUpdateUserPasswordResponse)
}

::google::protobuf::uint8* GateUpdateUserPasswordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUpdateUserPasswordResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUpdateUserPasswordResponse)
  return target;
}

int GateUpdateUserPasswordResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUpdateUserPasswordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUpdateUserPasswordResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUpdateUserPasswordResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUpdateUserPasswordResponse::MergeFrom(const GateUpdateUserPasswordResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GateUpdateUserPasswordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUpdateUserPasswordResponse::CopyFrom(const GateUpdateUserPasswordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUpdateUserPasswordResponse::IsInitialized() const {

  return true;
}

void GateUpdateUserPasswordResponse::Swap(GateUpdateUserPasswordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUpdateUserPasswordResponse::InternalSwap(GateUpdateUserPasswordResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUpdateUserPasswordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUpdateUserPasswordResponse_descriptor_;
  metadata.reflection = GateUpdateUserPasswordResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUpdateUserPasswordResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateUpdateUserPasswordResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateUpdateUserPasswordResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateUpdateUserPasswordResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateUpdateUserPasswordResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserPasswordResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateUpdateUserPasswordResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateUpdateUserPasswordResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserPasswordResponse.header)
}

// optional int64 ID = 2;
void GateUpdateUserPasswordResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateUpdateUserPasswordResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordResponse.ID)
  return id_;
}
 void GateUpdateUserPasswordResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserPasswordResponse.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateGetUserInfoRequest::kTypeFieldNumber;
const int GateGetUserInfoRequest::kUserNameFieldNumber;
const int GateGetUserInfoRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

GateGetUserInfoRequest::GateGetUserInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateGetUserInfoRequest)
}

void GateGetUserInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateGetUserInfoRequest::GateGetUserInfoRequest(const GateGetUserInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateGetUserInfoRequest)
}

void GateGetUserInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(0);
}

GateGetUserInfoRequest::~GateGetUserInfoRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateGetUserInfoRequest)
  SharedDtor();
}

void GateGetUserInfoRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateGetUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateGetUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateGetUserInfoRequest_descriptor_;
}

const GateGetUserInfoRequest& GateGetUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateGetUserInfoRequest* GateGetUserInfoRequest::default_instance_ = NULL;

GateGetUserInfoRequest* GateGetUserInfoRequest::New(::google::protobuf::Arena* arena) const {
  GateGetUserInfoRequest* n = new GateGetUserInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateGetUserInfoRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GateGetUserInfoRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, type_);
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GateGetUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateGetUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (tag == 18) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateGetUserInfoRequest.UserName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UserID;
        break;
      }

      // optional int64 UserID = 3;
      case 3: {
        if (tag == 24) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateGetUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateGetUserInfoRequest)
  return false;
#undef DO_
}

void GateGetUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateGetUserInfoRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string UserName = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateGetUserInfoRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional int64 UserID = 3;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateGetUserInfoRequest)
}

::google::protobuf::uint8* GateGetUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateGetUserInfoRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string UserName = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateGetUserInfoRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional int64 UserID = 3;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateGetUserInfoRequest)
  return target;
}

int GateGetUserInfoRequest::ByteSize() const {
  int total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string UserName = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional int64 UserID = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateGetUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateGetUserInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateGetUserInfoRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateGetUserInfoRequest::MergeFrom(const GateGetUserInfoRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void GateGetUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateGetUserInfoRequest::CopyFrom(const GateGetUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateGetUserInfoRequest::IsInitialized() const {

  return true;
}

void GateGetUserInfoRequest::Swap(GateGetUserInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateGetUserInfoRequest::InternalSwap(GateGetUserInfoRequest* other) {
  std::swap(type_, other->type_);
  username_.Swap(&other->username_);
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateGetUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateGetUserInfoRequest_descriptor_;
  metadata.reflection = GateGetUserInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateGetUserInfoRequest

// optional int32 type = 1;
void GateGetUserInfoRequest::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 GateGetUserInfoRequest::type() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoRequest.type)
  return type_;
}
 void GateGetUserInfoRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoRequest.type)
}

// optional string UserName = 2;
void GateGetUserInfoRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateGetUserInfoRequest::username() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoRequest.UserName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoRequest.UserName)
}
 void GateGetUserInfoRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoRequest.UserName)
}
 void GateGetUserInfoRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoRequest.UserName)
}
 ::std::string* GateGetUserInfoRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateGetUserInfoRequest::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoRequest.UserName)
}

// optional int64 UserID = 3;
void GateGetUserInfoRequest::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateGetUserInfoRequest::userid() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoRequest.UserID)
  return userid_;
}
 void GateGetUserInfoRequest::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoRequest.UserID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateGetUserInfoResponse::kHeaderFieldNumber;
const int GateGetUserInfoResponse::kIDFieldNumber;
const int GateGetUserInfoResponse::kUserFieldNumber;
const int GateGetUserInfoResponse::kNickNameFieldNumber;
const int GateGetUserInfoResponse::kAvatarFieldNumber;
#endif  // !_MSC_VER

GateGetUserInfoResponse::GateGetUserInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateGetUserInfoResponse)
}

void GateGetUserInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateGetUserInfoResponse::GateGetUserInfoResponse(const GateGetUserInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateGetUserInfoResponse)
}

void GateGetUserInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateGetUserInfoResponse::~GateGetUserInfoResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateGetUserInfoResponse)
  SharedDtor();
}

void GateGetUserInfoResponse::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void GateGetUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateGetUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateGetUserInfoResponse_descriptor_;
}

const GateGetUserInfoResponse& GateGetUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateGetUserInfoResponse* GateGetUserInfoResponse::default_instance_ = NULL;

GateGetUserInfoResponse* GateGetUserInfoResponse::New(::google::protobuf::Arena* arena) const {
  GateGetUserInfoResponse* n = new GateGetUserInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateGetUserInfoResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateGetUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateGetUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_User;
        break;
      }

      // optional string User = 3;
      case 3: {
        if (tag == 26) {
         parse_User:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateGetUserInfoResponse.User"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NickName;
        break;
      }

      // optional string NickName = 4;
      case 4: {
        if (tag == 34) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateGetUserInfoResponse.NickName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Avatar;
        break;
      }

      // optional bytes Avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_Avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateGetUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateGetUserInfoResponse)
  return false;
#undef DO_
}

void GateGetUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateGetUserInfoResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional string User = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateGetUserInfoResponse.User");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // optional string NickName = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateGetUserInfoResponse.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional bytes Avatar = 5;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->avatar(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateGetUserInfoResponse)
}

::google::protobuf::uint8* GateGetUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateGetUserInfoResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional string User = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateGetUserInfoResponse.User");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // optional string NickName = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateGetUserInfoResponse.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional bytes Avatar = 5;
  if (this->avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avatar(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateGetUserInfoResponse)
  return target;
}

int GateGetUserInfoResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string User = 3;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string NickName = 4;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional bytes Avatar = 5;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatar());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateGetUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateGetUserInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateGetUserInfoResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateGetUserInfoResponse::MergeFrom(const GateGetUserInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
}

void GateGetUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateGetUserInfoResponse::CopyFrom(const GateGetUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateGetUserInfoResponse::IsInitialized() const {

  return true;
}

void GateGetUserInfoResponse::Swap(GateGetUserInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateGetUserInfoResponse::InternalSwap(GateGetUserInfoResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  user_.Swap(&other->user_);
  nickname_.Swap(&other->nickname_);
  avatar_.Swap(&other->avatar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateGetUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateGetUserInfoResponse_descriptor_;
  metadata.reflection = GateGetUserInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateGetUserInfoResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateGetUserInfoResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateGetUserInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateGetUserInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateGetUserInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateGetUserInfoResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateGetUserInfoResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.header)
}

// optional int64 ID = 2;
void GateGetUserInfoResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateGetUserInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.ID)
  return id_;
}
 void GateGetUserInfoResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.ID)
}

// optional string User = 3;
void GateGetUserInfoResponse::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateGetUserInfoResponse::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoResponse::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.User)
}
 void GateGetUserInfoResponse::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoResponse.User)
}
 void GateGetUserInfoResponse::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoResponse.User)
}
 ::std::string* GateGetUserInfoResponse::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateGetUserInfoResponse::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoResponse::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.User)
}

// optional string NickName = 4;
void GateGetUserInfoResponse::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateGetUserInfoResponse::nickname() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.NickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoResponse::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.NickName)
}
 void GateGetUserInfoResponse::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoResponse.NickName)
}
 void GateGetUserInfoResponse::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoResponse.NickName)
}
 ::std::string* GateGetUserInfoResponse::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateGetUserInfoResponse::release_nickname() {
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoResponse::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.NickName)
}

// optional bytes Avatar = 5;
void GateGetUserInfoResponse::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateGetUserInfoResponse::avatar() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.Avatar)
  return avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoResponse::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.Avatar)
}
 void GateGetUserInfoResponse::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoResponse.Avatar)
}
 void GateGetUserInfoResponse::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoResponse.Avatar)
}
 ::std::string* GateGetUserInfoResponse::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.Avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateGetUserInfoResponse::release_avatar() {
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateGetUserInfoResponse::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.Avatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GateHeartbeatRequest::GateHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateHeartbeatRequest)
}

void GateHeartbeatRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateHeartbeatRequest::GateHeartbeatRequest(const GateHeartbeatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateHeartbeatRequest)
}

void GateHeartbeatRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GateHeartbeatRequest::~GateHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateHeartbeatRequest)
  SharedDtor();
}

void GateHeartbeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateHeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateHeartbeatRequest_descriptor_;
}

const GateHeartbeatRequest& GateHeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateHeartbeatRequest* GateHeartbeatRequest::default_instance_ = NULL;

GateHeartbeatRequest* GateHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  GateHeartbeatRequest* n = new GateHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateHeartbeatRequest::Clear() {
}

bool GateHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateHeartbeatRequest)
  return false;
#undef DO_
}

void GateHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateHeartbeatRequest)
  // @@protoc_insertion_point(serialize_end:candy.meta.GateHeartbeatRequest)
}

::google::protobuf::uint8* GateHeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateHeartbeatRequest)
  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateHeartbeatRequest)
  return target;
}

int GateHeartbeatRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateHeartbeatRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateHeartbeatRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateHeartbeatRequest::MergeFrom(const GateHeartbeatRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GateHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateHeartbeatRequest::CopyFrom(const GateHeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateHeartbeatRequest::IsInitialized() const {

  return true;
}

void GateHeartbeatRequest::Swap(GateHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateHeartbeatRequest::InternalSwap(GateHeartbeatRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateHeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateHeartbeatRequest_descriptor_;
  metadata.reflection = GateHeartbeatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateHeartbeatRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GateHeartbeatResponse::GateHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateHeartbeatResponse)
}

void GateHeartbeatResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateHeartbeatResponse::GateHeartbeatResponse(const GateHeartbeatResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateHeartbeatResponse)
}

void GateHeartbeatResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GateHeartbeatResponse::~GateHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateHeartbeatResponse)
  SharedDtor();
}

void GateHeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateHeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateHeartbeatResponse_descriptor_;
}

const GateHeartbeatResponse& GateHeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateHeartbeatResponse* GateHeartbeatResponse::default_instance_ = NULL;

GateHeartbeatResponse* GateHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  GateHeartbeatResponse* n = new GateHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateHeartbeatResponse::Clear() {
}

bool GateHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateHeartbeatResponse)
  return false;
#undef DO_
}

void GateHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateHeartbeatResponse)
  // @@protoc_insertion_point(serialize_end:candy.meta.GateHeartbeatResponse)
}

::google::protobuf::uint8* GateHeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateHeartbeatResponse)
  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateHeartbeatResponse)
  return target;
}

int GateHeartbeatResponse::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateHeartbeatResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateHeartbeatResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateHeartbeatResponse::MergeFrom(const GateHeartbeatResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GateHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateHeartbeatResponse::CopyFrom(const GateHeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateHeartbeatResponse::IsInitialized() const {

  return true;
}

void GateHeartbeatResponse::Swap(GateHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateHeartbeatResponse::InternalSwap(GateHeartbeatResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateHeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateHeartbeatResponse_descriptor_;
  metadata.reflection = GateHeartbeatResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateHeartbeatResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUserLoginRequest::kUserFieldNumber;
const int GateUserLoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

GateUserLoginRequest::GateUserLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUserLoginRequest)
}

void GateUserLoginRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateUserLoginRequest::GateUserLoginRequest(const GateUserLoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUserLoginRequest)
}

void GateUserLoginRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateUserLoginRequest::~GateUserLoginRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUserLoginRequest)
  SharedDtor();
}

void GateUserLoginRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateUserLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUserLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUserLoginRequest_descriptor_;
}

const GateUserLoginRequest& GateUserLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUserLoginRequest* GateUserLoginRequest::default_instance_ = NULL;

GateUserLoginRequest* GateUserLoginRequest::New(::google::protobuf::Arena* arena) const {
  GateUserLoginRequest* n = new GateUserLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUserLoginRequest::Clear() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateUserLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUserLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string User = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateUserLoginRequest.User"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // optional string Password = 2;
      case 2: {
        if (tag == 18) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateUserLoginRequest.Password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUserLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUserLoginRequest)
  return false;
#undef DO_
}

void GateUserLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUserLoginRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUserLoginRequest.User");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUserLoginRequest.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUserLoginRequest)
}

::google::protobuf::uint8* GateUserLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUserLoginRequest)
  // optional string User = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUserLoginRequest.User");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateUserLoginRequest.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUserLoginRequest)
  return target;
}

int GateUserLoginRequest::ByteSize() const {
  int total_size = 0;

  // optional string User = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string Password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUserLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUserLoginRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUserLoginRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUserLoginRequest::MergeFrom(const GateUserLoginRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void GateUserLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUserLoginRequest::CopyFrom(const GateUserLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUserLoginRequest::IsInitialized() const {

  return true;
}

void GateUserLoginRequest::Swap(GateUserLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUserLoginRequest::InternalSwap(GateUserLoginRequest* other) {
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUserLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUserLoginRequest_descriptor_;
  metadata.reflection = GateUserLoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUserLoginRequest

// optional string User = 1;
void GateUserLoginRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUserLoginRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUserLoginRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUserLoginRequest.User)
}
 void GateUserLoginRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUserLoginRequest.User)
}
 void GateUserLoginRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUserLoginRequest.User)
}
 ::std::string* GateUserLoginRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLoginRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUserLoginRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUserLoginRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLoginRequest.User)
}

// optional string Password = 2;
void GateUserLoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUserLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginRequest.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUserLoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUserLoginRequest.Password)
}
 void GateUserLoginRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUserLoginRequest.Password)
}
 void GateUserLoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUserLoginRequest.Password)
}
 ::std::string* GateUserLoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLoginRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUserLoginRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUserLoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLoginRequest.Password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUserLoginResponse::kHeaderFieldNumber;
const int GateUserLoginResponse::kIDFieldNumber;
#endif  // !_MSC_VER

GateUserLoginResponse::GateUserLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUserLoginResponse)
}

void GateUserLoginResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateUserLoginResponse::GateUserLoginResponse(const GateUserLoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUserLoginResponse)
}

void GateUserLoginResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

GateUserLoginResponse::~GateUserLoginResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUserLoginResponse)
  SharedDtor();
}

void GateUserLoginResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateUserLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUserLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUserLoginResponse_descriptor_;
}

const GateUserLoginResponse& GateUserLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUserLoginResponse* GateUserLoginResponse::default_instance_ = NULL;

GateUserLoginResponse* GateUserLoginResponse::New(::google::protobuf::Arena* arena) const {
  GateUserLoginResponse* n = new GateUserLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUserLoginResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool GateUserLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUserLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUserLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUserLoginResponse)
  return false;
#undef DO_
}

void GateUserLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUserLoginResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUserLoginResponse)
}

::google::protobuf::uint8* GateUserLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUserLoginResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUserLoginResponse)
  return target;
}

int GateUserLoginResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUserLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUserLoginResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUserLoginResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUserLoginResponse::MergeFrom(const GateUserLoginResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GateUserLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUserLoginResponse::CopyFrom(const GateUserLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUserLoginResponse::IsInitialized() const {

  return true;
}

void GateUserLoginResponse::Swap(GateUserLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUserLoginResponse::InternalSwap(GateUserLoginResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUserLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUserLoginResponse_descriptor_;
  metadata.reflection = GateUserLoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUserLoginResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateUserLoginResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateUserLoginResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateUserLoginResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateUserLoginResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLoginResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateUserLoginResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateUserLoginResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLoginResponse.header)
}

// optional int64 ID = 2;
void GateUserLoginResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateUserLoginResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginResponse.ID)
  return id_;
}
 void GateUserLoginResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateUserLoginResponse.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GateUserLogoutRequest::GateUserLogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUserLogoutRequest)
}

void GateUserLogoutRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateUserLogoutRequest::GateUserLogoutRequest(const GateUserLogoutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUserLogoutRequest)
}

void GateUserLogoutRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GateUserLogoutRequest::~GateUserLogoutRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUserLogoutRequest)
  SharedDtor();
}

void GateUserLogoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateUserLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUserLogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUserLogoutRequest_descriptor_;
}

const GateUserLogoutRequest& GateUserLogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUserLogoutRequest* GateUserLogoutRequest::default_instance_ = NULL;

GateUserLogoutRequest* GateUserLogoutRequest::New(::google::protobuf::Arena* arena) const {
  GateUserLogoutRequest* n = new GateUserLogoutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUserLogoutRequest::Clear() {
}

bool GateUserLogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUserLogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUserLogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUserLogoutRequest)
  return false;
#undef DO_
}

void GateUserLogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUserLogoutRequest)
  // @@protoc_insertion_point(serialize_end:candy.meta.GateUserLogoutRequest)
}

::google::protobuf::uint8* GateUserLogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUserLogoutRequest)
  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUserLogoutRequest)
  return target;
}

int GateUserLogoutRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUserLogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUserLogoutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUserLogoutRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUserLogoutRequest::MergeFrom(const GateUserLogoutRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GateUserLogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUserLogoutRequest::CopyFrom(const GateUserLogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUserLogoutRequest::IsInitialized() const {

  return true;
}

void GateUserLogoutRequest::Swap(GateUserLogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUserLogoutRequest::InternalSwap(GateUserLogoutRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUserLogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUserLogoutRequest_descriptor_;
  metadata.reflection = GateUserLogoutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUserLogoutRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUserLogoutResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

GateUserLogoutResponse::GateUserLogoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUserLogoutResponse)
}

void GateUserLogoutResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateUserLogoutResponse::GateUserLogoutResponse(const GateUserLogoutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUserLogoutResponse)
}

void GateUserLogoutResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

GateUserLogoutResponse::~GateUserLogoutResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUserLogoutResponse)
  SharedDtor();
}

void GateUserLogoutResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateUserLogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUserLogoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUserLogoutResponse_descriptor_;
}

const GateUserLogoutResponse& GateUserLogoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUserLogoutResponse* GateUserLogoutResponse::default_instance_ = NULL;

GateUserLogoutResponse* GateUserLogoutResponse::New(::google::protobuf::Arena* arena) const {
  GateUserLogoutResponse* n = new GateUserLogoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUserLogoutResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GateUserLogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUserLogoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUserLogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUserLogoutResponse)
  return false;
#undef DO_
}

void GateUserLogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUserLogoutResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUserLogoutResponse)
}

::google::protobuf::uint8* GateUserLogoutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUserLogoutResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUserLogoutResponse)
  return target;
}

int GateUserLogoutResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUserLogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUserLogoutResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUserLogoutResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUserLogoutResponse::MergeFrom(const GateUserLogoutResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateUserLogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUserLogoutResponse::CopyFrom(const GateUserLogoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUserLogoutResponse::IsInitialized() const {

  return true;
}

void GateUserLogoutResponse::Swap(GateUserLogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUserLogoutResponse::InternalSwap(GateUserLogoutResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUserLogoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUserLogoutResponse_descriptor_;
  metadata.reflection = GateUserLogoutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUserLogoutResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateUserLogoutResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateUserLogoutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateUserLogoutResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLogoutResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateUserLogoutResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLogoutResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateUserLogoutResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateUserLogoutResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLogoutResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUploadFileRequest::kFileFieldNumber;
#endif  // !_MSC_VER

GateUploadFileRequest::GateUploadFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUploadFileRequest)
}

void GateUploadFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateUploadFileRequest::GateUploadFileRequest(const GateUploadFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUploadFileRequest)
}

void GateUploadFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GateUploadFileRequest::~GateUploadFileRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUploadFileRequest)
  SharedDtor();
}

void GateUploadFileRequest::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GateUploadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUploadFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUploadFileRequest_descriptor_;
}

const GateUploadFileRequest& GateUploadFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUploadFileRequest* GateUploadFileRequest::default_instance_ = NULL;

GateUploadFileRequest* GateUploadFileRequest::New(::google::protobuf::Arena* arena) const {
  GateUploadFileRequest* n = new GateUploadFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUploadFileRequest::Clear() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GateUploadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUploadFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes File = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUploadFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUploadFileRequest)
  return false;
#undef DO_
}

void GateUploadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUploadFileRequest)
  // optional bytes File = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUploadFileRequest)
}

::google::protobuf::uint8* GateUploadFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUploadFileRequest)
  // optional bytes File = 1;
  if (this->file().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUploadFileRequest)
  return target;
}

int GateUploadFileRequest::ByteSize() const {
  int total_size = 0;

  // optional bytes File = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUploadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUploadFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUploadFileRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUploadFileRequest::MergeFrom(const GateUploadFileRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
}

void GateUploadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUploadFileRequest::CopyFrom(const GateUploadFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUploadFileRequest::IsInitialized() const {

  return true;
}

void GateUploadFileRequest::Swap(GateUploadFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUploadFileRequest::InternalSwap(GateUploadFileRequest* other) {
  file_.Swap(&other->file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUploadFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUploadFileRequest_descriptor_;
  metadata.reflection = GateUploadFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUploadFileRequest

// optional bytes File = 1;
void GateUploadFileRequest::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GateUploadFileRequest::file() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUploadFileRequest.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUploadFileRequest::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUploadFileRequest.File)
}
 void GateUploadFileRequest::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUploadFileRequest.File)
}
 void GateUploadFileRequest::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUploadFileRequest.File)
}
 ::std::string* GateUploadFileRequest::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUploadFileRequest.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GateUploadFileRequest::release_file() {
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GateUploadFileRequest::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUploadFileRequest.File)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateUploadFileResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

GateUploadFileResponse::GateUploadFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateUploadFileResponse)
}

void GateUploadFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateUploadFileResponse::GateUploadFileResponse(const GateUploadFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateUploadFileResponse)
}

void GateUploadFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

GateUploadFileResponse::~GateUploadFileResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateUploadFileResponse)
  SharedDtor();
}

void GateUploadFileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateUploadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUploadFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUploadFileResponse_descriptor_;
}

const GateUploadFileResponse& GateUploadFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateUploadFileResponse* GateUploadFileResponse::default_instance_ = NULL;

GateUploadFileResponse* GateUploadFileResponse::New(::google::protobuf::Arena* arena) const {
  GateUploadFileResponse* n = new GateUploadFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUploadFileResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GateUploadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateUploadFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateUploadFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateUploadFileResponse)
  return false;
#undef DO_
}

void GateUploadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateUploadFileResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateUploadFileResponse)
}

::google::protobuf::uint8* GateUploadFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateUploadFileResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateUploadFileResponse)
  return target;
}

int GateUploadFileResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUploadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateUploadFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUploadFileResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateUploadFileResponse::MergeFrom(const GateUploadFileResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateUploadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUploadFileResponse::CopyFrom(const GateUploadFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUploadFileResponse::IsInitialized() const {

  return true;
}

void GateUploadFileResponse::Swap(GateUploadFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUploadFileResponse::InternalSwap(GateUploadFileResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUploadFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUploadFileResponse_descriptor_;
  metadata.reflection = GateUploadFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUploadFileResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateUploadFileResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateUploadFileResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateUploadFileResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUploadFileResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateUploadFileResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUploadFileResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateUploadFileResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateUploadFileResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUploadFileResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateCheckFileRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

GateCheckFileRequest::GateCheckFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateCheckFileRequest)
}

void GateCheckFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateCheckFileRequest::GateCheckFileRequest(const GateCheckFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateCheckFileRequest)
}

void GateCheckFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

GateCheckFileRequest::~GateCheckFileRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateCheckFileRequest)
  SharedDtor();
}

void GateCheckFileRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateCheckFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateCheckFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateCheckFileRequest_descriptor_;
}

const GateCheckFileRequest& GateCheckFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateCheckFileRequest* GateCheckFileRequest::default_instance_ = NULL;

GateCheckFileRequest* GateCheckFileRequest::New(::google::protobuf::Arena* arena) const {
  GateCheckFileRequest* n = new GateCheckFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateCheckFileRequest::Clear() {
  names_.Clear();
}

bool GateCheckFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateCheckFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Names = 1;
      case 1: {
        if (tag == 10) {
         parse_Names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateCheckFileRequest.Names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateCheckFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateCheckFileRequest)
  return false;
#undef DO_
}

void GateCheckFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateCheckFileRequest)
  // repeated string Names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateCheckFileRequest.Names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateCheckFileRequest)
}

::google::protobuf::uint8* GateCheckFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateCheckFileRequest)
  // repeated string Names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateCheckFileRequest.Names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateCheckFileRequest)
  return target;
}

int GateCheckFileRequest::ByteSize() const {
  int total_size = 0;

  // repeated string Names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateCheckFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateCheckFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateCheckFileRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateCheckFileRequest::MergeFrom(const GateCheckFileRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  names_.MergeFrom(from.names_);
}

void GateCheckFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateCheckFileRequest::CopyFrom(const GateCheckFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateCheckFileRequest::IsInitialized() const {

  return true;
}

void GateCheckFileRequest::Swap(GateCheckFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateCheckFileRequest::InternalSwap(GateCheckFileRequest* other) {
  names_.UnsafeArenaSwap(&other->names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateCheckFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateCheckFileRequest_descriptor_;
  metadata.reflection = GateCheckFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateCheckFileRequest

// repeated string Names = 1;
int GateCheckFileRequest::names_size() const {
  return names_.size();
}
void GateCheckFileRequest::clear_names() {
  names_.Clear();
}
 const ::std::string& GateCheckFileRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCheckFileRequest.Names)
  return names_.Get(index);
}
 ::std::string* GateCheckFileRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCheckFileRequest.Names)
  return names_.Mutable(index);
}
 void GateCheckFileRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateCheckFileRequest.Names)
  names_.Mutable(index)->assign(value);
}
 void GateCheckFileRequest::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateCheckFileRequest.Names)
}
 void GateCheckFileRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateCheckFileRequest.Names)
}
 ::std::string* GateCheckFileRequest::add_names() {
  return names_.Add();
}
 void GateCheckFileRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateCheckFileRequest.Names)
}
 void GateCheckFileRequest::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateCheckFileRequest.Names)
}
 void GateCheckFileRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateCheckFileRequest.Names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateCheckFileRequest::names() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateCheckFileRequest.Names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GateCheckFileRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateCheckFileRequest.Names)
  return &names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateCheckFileResponse::kHeaderFieldNumber;
const int GateCheckFileResponse::kNamesFieldNumber;
#endif  // !_MSC_VER

GateCheckFileResponse::GateCheckFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateCheckFileResponse)
}

void GateCheckFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateCheckFileResponse::GateCheckFileResponse(const GateCheckFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateCheckFileResponse)
}

void GateCheckFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
}

GateCheckFileResponse::~GateCheckFileResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateCheckFileResponse)
  SharedDtor();
}

void GateCheckFileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateCheckFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateCheckFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateCheckFileResponse_descriptor_;
}

const GateCheckFileResponse& GateCheckFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateCheckFileResponse* GateCheckFileResponse::default_instance_ = NULL;

GateCheckFileResponse* GateCheckFileResponse::New(::google::protobuf::Arena* arena) const {
  GateCheckFileResponse* n = new GateCheckFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateCheckFileResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  names_.Clear();
}

bool GateCheckFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateCheckFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader Header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Names;
        break;
      }

      // repeated string Names = 2;
      case 2: {
        if (tag == 18) {
         parse_Names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateCheckFileResponse.Names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateCheckFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateCheckFileResponse)
  return false;
#undef DO_
}

void GateCheckFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateCheckFileResponse)
  // optional .candy.meta.ResponseHeader Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string Names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateCheckFileResponse.Names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateCheckFileResponse)
}

::google::protobuf::uint8* GateCheckFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateCheckFileResponse)
  // optional .candy.meta.ResponseHeader Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // repeated string Names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateCheckFileResponse.Names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateCheckFileResponse)
  return target;
}

int GateCheckFileResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated string Names = 2;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateCheckFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateCheckFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateCheckFileResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateCheckFileResponse::MergeFrom(const GateCheckFileResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  names_.MergeFrom(from.names_);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateCheckFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateCheckFileResponse::CopyFrom(const GateCheckFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateCheckFileResponse::IsInitialized() const {

  return true;
}

void GateCheckFileResponse::Swap(GateCheckFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateCheckFileResponse::InternalSwap(GateCheckFileResponse* other) {
  std::swap(header_, other->header_);
  names_.UnsafeArenaSwap(&other->names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateCheckFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateCheckFileResponse_descriptor_;
  metadata.reflection = GateCheckFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateCheckFileResponse

// optional .candy.meta.ResponseHeader Header = 1;
bool GateCheckFileResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateCheckFileResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateCheckFileResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCheckFileResponse.Header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateCheckFileResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCheckFileResponse.Header)
  return header_;
}
::candy::meta::ResponseHeader* GateCheckFileResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateCheckFileResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateCheckFileResponse.Header)
}

// repeated string Names = 2;
int GateCheckFileResponse::names_size() const {
  return names_.size();
}
void GateCheckFileResponse::clear_names() {
  names_.Clear();
}
 const ::std::string& GateCheckFileResponse::names(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCheckFileResponse.Names)
  return names_.Get(index);
}
 ::std::string* GateCheckFileResponse::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCheckFileResponse.Names)
  return names_.Mutable(index);
}
 void GateCheckFileResponse::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateCheckFileResponse.Names)
  names_.Mutable(index)->assign(value);
}
 void GateCheckFileResponse::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateCheckFileResponse.Names)
}
 void GateCheckFileResponse::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateCheckFileResponse.Names)
}
 ::std::string* GateCheckFileResponse::add_names() {
  return names_.Add();
}
 void GateCheckFileResponse::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateCheckFileResponse.Names)
}
 void GateCheckFileResponse::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateCheckFileResponse.Names)
}
 void GateCheckFileResponse::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateCheckFileResponse.Names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateCheckFileResponse::names() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateCheckFileResponse.Names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GateCheckFileResponse::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateCheckFileResponse.Names)
  return &names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateDownloadFileRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

GateDownloadFileRequest::GateDownloadFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateDownloadFileRequest)
}

void GateDownloadFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateDownloadFileRequest::GateDownloadFileRequest(const GateDownloadFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateDownloadFileRequest)
}

void GateDownloadFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

GateDownloadFileRequest::~GateDownloadFileRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateDownloadFileRequest)
  SharedDtor();
}

void GateDownloadFileRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateDownloadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateDownloadFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateDownloadFileRequest_descriptor_;
}

const GateDownloadFileRequest& GateDownloadFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateDownloadFileRequest* GateDownloadFileRequest::default_instance_ = NULL;

GateDownloadFileRequest* GateDownloadFileRequest::New(::google::protobuf::Arena* arena) const {
  GateDownloadFileRequest* n = new GateDownloadFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateDownloadFileRequest::Clear() {
  names_.Clear();
}

bool GateDownloadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateDownloadFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Names = 1;
      case 1: {
        if (tag == 10) {
         parse_Names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateDownloadFileRequest.Names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateDownloadFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateDownloadFileRequest)
  return false;
#undef DO_
}

void GateDownloadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateDownloadFileRequest)
  // repeated string Names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateDownloadFileRequest.Names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateDownloadFileRequest)
}

::google::protobuf::uint8* GateDownloadFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateDownloadFileRequest)
  // repeated string Names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "candy.meta.GateDownloadFileRequest.Names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateDownloadFileRequest)
  return target;
}

int GateDownloadFileRequest::ByteSize() const {
  int total_size = 0;

  // repeated string Names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateDownloadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateDownloadFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateDownloadFileRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateDownloadFileRequest::MergeFrom(const GateDownloadFileRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  names_.MergeFrom(from.names_);
}

void GateDownloadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateDownloadFileRequest::CopyFrom(const GateDownloadFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateDownloadFileRequest::IsInitialized() const {

  return true;
}

void GateDownloadFileRequest::Swap(GateDownloadFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateDownloadFileRequest::InternalSwap(GateDownloadFileRequest* other) {
  names_.UnsafeArenaSwap(&other->names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateDownloadFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateDownloadFileRequest_descriptor_;
  metadata.reflection = GateDownloadFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateDownloadFileRequest

// repeated string Names = 1;
int GateDownloadFileRequest::names_size() const {
  return names_.size();
}
void GateDownloadFileRequest::clear_names() {
  names_.Clear();
}
 const ::std::string& GateDownloadFileRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateDownloadFileRequest.Names)
  return names_.Get(index);
}
 ::std::string* GateDownloadFileRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateDownloadFileRequest.Names)
  return names_.Mutable(index);
}
 void GateDownloadFileRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateDownloadFileRequest.Names)
  names_.Mutable(index)->assign(value);
}
 void GateDownloadFileRequest::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateDownloadFileRequest.Names)
}
 void GateDownloadFileRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateDownloadFileRequest.Names)
}
 ::std::string* GateDownloadFileRequest::add_names() {
  return names_.Add();
}
 void GateDownloadFileRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateDownloadFileRequest.Names)
}
 void GateDownloadFileRequest::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateDownloadFileRequest.Names)
}
 void GateDownloadFileRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateDownloadFileRequest.Names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateDownloadFileRequest::names() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateDownloadFileRequest.Names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GateDownloadFileRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateDownloadFileRequest.Names)
  return &names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateDownloadFileResponse::kHeaderFieldNumber;
const int GateDownloadFileResponse::kFilesFieldNumber;
#endif  // !_MSC_VER

GateDownloadFileResponse::GateDownloadFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateDownloadFileResponse)
}

void GateDownloadFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateDownloadFileResponse::GateDownloadFileResponse(const GateDownloadFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateDownloadFileResponse)
}

void GateDownloadFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  files_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  files_.SetEntryDescriptor(
      &::candy::meta::GateDownloadFileResponse_FilesEntry_descriptor_);
}

GateDownloadFileResponse::~GateDownloadFileResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateDownloadFileResponse)
  SharedDtor();
}

void GateDownloadFileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateDownloadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateDownloadFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateDownloadFileResponse_descriptor_;
}

const GateDownloadFileResponse& GateDownloadFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateDownloadFileResponse* GateDownloadFileResponse::default_instance_ = NULL;

GateDownloadFileResponse* GateDownloadFileResponse::New(::google::protobuf::Arena* arena) const {
  GateDownloadFileResponse* n = new GateDownloadFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateDownloadFileResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  files_.Clear();
}

bool GateDownloadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateDownloadFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Files;
        break;
      }

      // map<string, bytes> Files = 2;
      case 2: {
        if (tag == 18) {
         parse_Files:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Files:
          ::google::protobuf::scoped_ptr<GateDownloadFileResponse_FilesEntry> entry(files_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_files())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "candy.meta.GateDownloadFileResponse.FilesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Files;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateDownloadFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateDownloadFileResponse)
  return false;
#undef DO_
}

void GateDownloadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateDownloadFileResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // map<string, bytes> Files = 2;
  {
    ::google::protobuf::scoped_ptr<GateDownloadFileResponse_FilesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->files().begin();
        it != this->files().end(); ++it) {
      entry.reset(files_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "candy.meta.GateDownloadFileResponse.FilesEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateDownloadFileResponse)
}

::google::protobuf::uint8* GateDownloadFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateDownloadFileResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // map<string, bytes> Files = 2;
  {
    ::google::protobuf::scoped_ptr<GateDownloadFileResponse_FilesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->files().begin();
        it != this->files().end(); ++it) {
      entry.reset(files_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "candy.meta.GateDownloadFileResponse.FilesEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateDownloadFileResponse)
  return target;
}

int GateDownloadFileResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // map<string, bytes> Files = 2;
  total_size += 1 * this->files_size();
  {
    ::google::protobuf::scoped_ptr<GateDownloadFileResponse_FilesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->files().begin();
        it != this->files().end(); ++it) {
      entry.reset(files_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateDownloadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateDownloadFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateDownloadFileResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateDownloadFileResponse::MergeFrom(const GateDownloadFileResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  files_.MergeFrom(from.files_);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateDownloadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateDownloadFileResponse::CopyFrom(const GateDownloadFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateDownloadFileResponse::IsInitialized() const {

  return true;
}

void GateDownloadFileResponse::Swap(GateDownloadFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateDownloadFileResponse::InternalSwap(GateDownloadFileResponse* other) {
  std::swap(header_, other->header_);
  files_.Swap(&other->files_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateDownloadFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateDownloadFileResponse_descriptor_;
  metadata.reflection = GateDownloadFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateDownloadFileResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateDownloadFileResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateDownloadFileResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateDownloadFileResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateDownloadFileResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateDownloadFileResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateDownloadFileResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateDownloadFileResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateDownloadFileResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateDownloadFileResponse.header)
}

// map<string, bytes> Files = 2;
int GateDownloadFileResponse::files_size() const {
  return files_.size();
}
void GateDownloadFileResponse::clear_files() {
  files_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
GateDownloadFileResponse::files() const {
  // @@protoc_insertion_point(field_map:candy.meta.GateDownloadFileResponse.Files)
  return files_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
GateDownloadFileResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:candy.meta.GateDownloadFileResponse.Files)
  return files_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateNoticeRequest::kIDFieldNumber;
const int GateNoticeRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

GateNoticeRequest::GateNoticeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateNoticeRequest)
}

void GateNoticeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  msg_ = const_cast< ::candy::meta::Message*>(&::candy::meta::Message::default_instance());
}

GateNoticeRequest::GateNoticeRequest(const GateNoticeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateNoticeRequest)
}

void GateNoticeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_ = NULL;
}

GateNoticeRequest::~GateNoticeRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateNoticeRequest)
  SharedDtor();
}

void GateNoticeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void GateNoticeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateNoticeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateNoticeRequest_descriptor_;
}

const GateNoticeRequest& GateNoticeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateNoticeRequest* GateNoticeRequest::default_instance_ = NULL;

GateNoticeRequest* GateNoticeRequest::New(::google::protobuf::Arena* arena) const {
  GateNoticeRequest* n = new GateNoticeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateNoticeRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
  id_.Clear();
}

bool GateNoticeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateNoticeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .candy.meta.PushID ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_ID;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // optional .candy.meta.Message Msg = 2;
      case 2: {
        if (tag == 18) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateNoticeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateNoticeRequest)
  return false;
#undef DO_
}

void GateNoticeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateNoticeRequest)
  // repeated .candy.meta.PushID ID = 1;
  for (unsigned int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(i), output);
  }

  // optional .candy.meta.Message Msg = 2;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateNoticeRequest)
}

::google::protobuf::uint8* GateNoticeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateNoticeRequest)
  // repeated .candy.meta.PushID ID = 1;
  for (unsigned int i = 0, n = this->id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(i), target);
  }

  // optional .candy.meta.Message Msg = 2;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateNoticeRequest)
  return target;
}

int GateNoticeRequest::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.Message Msg = 2;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  // repeated .candy.meta.PushID ID = 1;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateNoticeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateNoticeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateNoticeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateNoticeRequest::MergeFrom(const GateNoticeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  id_.MergeFrom(from.id_);
  if (from.has_msg()) {
    mutable_msg()->::candy::meta::Message::MergeFrom(from.msg());
  }
}

void GateNoticeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateNoticeRequest::CopyFrom(const GateNoticeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateNoticeRequest::IsInitialized() const {

  return true;
}

void GateNoticeRequest::Swap(GateNoticeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateNoticeRequest::InternalSwap(GateNoticeRequest* other) {
  id_.UnsafeArenaSwap(&other->id_);
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateNoticeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateNoticeRequest_descriptor_;
  metadata.reflection = GateNoticeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateNoticeRequest

// repeated .candy.meta.PushID ID = 1;
int GateNoticeRequest::id_size() const {
  return id_.size();
}
void GateNoticeRequest::clear_id() {
  id_.Clear();
}
const ::candy::meta::PushID& GateNoticeRequest::id(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateNoticeRequest.ID)
  return id_.Get(index);
}
::candy::meta::PushID* GateNoticeRequest::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateNoticeRequest.ID)
  return id_.Mutable(index);
}
::candy::meta::PushID* GateNoticeRequest::add_id() {
  // @@protoc_insertion_point(field_add:candy.meta.GateNoticeRequest.ID)
  return id_.Add();
}
::google::protobuf::RepeatedPtrField< ::candy::meta::PushID >*
GateNoticeRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateNoticeRequest.ID)
  return &id_;
}
const ::google::protobuf::RepeatedPtrField< ::candy::meta::PushID >&
GateNoticeRequest::id() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateNoticeRequest.ID)
  return id_;
}

// optional .candy.meta.Message Msg = 2;
bool GateNoticeRequest::has_msg() const {
  return !_is_default_instance_ && msg_ != NULL;
}
void GateNoticeRequest::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::candy::meta::Message& GateNoticeRequest::msg() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateNoticeRequest.Msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
::candy::meta::Message* GateNoticeRequest::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::candy::meta::Message;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateNoticeRequest.Msg)
  return msg_;
}
::candy::meta::Message* GateNoticeRequest::release_msg() {
  
  ::candy::meta::Message* temp = msg_;
  msg_ = NULL;
  return temp;
}
void GateNoticeRequest::set_allocated_msg(::candy::meta::Message* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateNoticeRequest.Msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateNoticeResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

GateNoticeResponse::GateNoticeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateNoticeResponse)
}

void GateNoticeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateNoticeResponse::GateNoticeResponse(const GateNoticeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateNoticeResponse)
}

void GateNoticeResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

GateNoticeResponse::~GateNoticeResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateNoticeResponse)
  SharedDtor();
}

void GateNoticeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateNoticeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateNoticeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateNoticeResponse_descriptor_;
}

const GateNoticeResponse& GateNoticeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateNoticeResponse* GateNoticeResponse::default_instance_ = NULL;

GateNoticeResponse* GateNoticeResponse::New(::google::protobuf::Arena* arena) const {
  GateNoticeResponse* n = new GateNoticeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateNoticeResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GateNoticeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateNoticeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateNoticeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateNoticeResponse)
  return false;
#undef DO_
}

void GateNoticeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateNoticeResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateNoticeResponse)
}

::google::protobuf::uint8* GateNoticeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateNoticeResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateNoticeResponse)
  return target;
}

int GateNoticeResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateNoticeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateNoticeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateNoticeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateNoticeResponse::MergeFrom(const GateNoticeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateNoticeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateNoticeResponse::CopyFrom(const GateNoticeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateNoticeResponse::IsInitialized() const {

  return true;
}

void GateNoticeResponse::Swap(GateNoticeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateNoticeResponse::InternalSwap(GateNoticeResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateNoticeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateNoticeResponse_descriptor_;
  metadata.reflection = GateNoticeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateNoticeResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateNoticeResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateNoticeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateNoticeResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateNoticeResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateNoticeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateNoticeResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateNoticeResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateNoticeResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateNoticeResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateLoadMessageRequest::kIDFieldNumber;
const int GateLoadMessageRequest::kReverseFieldNumber;
#endif  // !_MSC_VER

GateLoadMessageRequest::GateLoadMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateLoadMessageRequest)
}

void GateLoadMessageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateLoadMessageRequest::GateLoadMessageRequest(const GateLoadMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateLoadMessageRequest)
}

void GateLoadMessageRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  reverse_ = false;
}

GateLoadMessageRequest::~GateLoadMessageRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateLoadMessageRequest)
  SharedDtor();
}

void GateLoadMessageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateLoadMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateLoadMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateLoadMessageRequest_descriptor_;
}

const GateLoadMessageRequest& GateLoadMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateLoadMessageRequest* GateLoadMessageRequest::default_instance_ = NULL;

GateLoadMessageRequest* GateLoadMessageRequest::New(::google::protobuf::Arena* arena) const {
  GateLoadMessageRequest* n = new GateLoadMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateLoadMessageRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GateLoadMessageRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, reverse_);

#undef ZR_HELPER_
#undef ZR_

}

bool GateLoadMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateLoadMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Reverse;
        break;
      }

      // optional bool Reverse = 2;
      case 2: {
        if (tag == 16) {
         parse_Reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateLoadMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateLoadMessageRequest)
  return false;
#undef DO_
}

void GateLoadMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateLoadMessageRequest)
  // optional int64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bool Reverse = 2;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reverse(), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateLoadMessageRequest)
}

::google::protobuf::uint8* GateLoadMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateLoadMessageRequest)
  // optional int64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bool Reverse = 2;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reverse(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateLoadMessageRequest)
  return target;
}

int GateLoadMessageRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional bool Reverse = 2;
  if (this->reverse() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateLoadMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateLoadMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateLoadMessageRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateLoadMessageRequest::MergeFrom(const GateLoadMessageRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
}

void GateLoadMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateLoadMessageRequest::CopyFrom(const GateLoadMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateLoadMessageRequest::IsInitialized() const {

  return true;
}

void GateLoadMessageRequest::Swap(GateLoadMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateLoadMessageRequest::InternalSwap(GateLoadMessageRequest* other) {
  std::swap(id_, other->id_);
  std::swap(reverse_, other->reverse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateLoadMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateLoadMessageRequest_descriptor_;
  metadata.reflection = GateLoadMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateLoadMessageRequest

// optional int64 ID = 1;
void GateLoadMessageRequest::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GateLoadMessageRequest::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageRequest.ID)
  return id_;
}
 void GateLoadMessageRequest::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateLoadMessageRequest.ID)
}

// optional bool Reverse = 2;
void GateLoadMessageRequest::clear_reverse() {
  reverse_ = false;
}
 bool GateLoadMessageRequest::reverse() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageRequest.Reverse)
  return reverse_;
}
 void GateLoadMessageRequest::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateLoadMessageRequest.Reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateLoadMessageResponse::kHeaderFieldNumber;
const int GateLoadMessageResponse::kMsgsFieldNumber;
#endif  // !_MSC_VER

GateLoadMessageResponse::GateLoadMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateLoadMessageResponse)
}

void GateLoadMessageResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateLoadMessageResponse::GateLoadMessageResponse(const GateLoadMessageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateLoadMessageResponse)
}

void GateLoadMessageResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

GateLoadMessageResponse::~GateLoadMessageResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateLoadMessageResponse)
  SharedDtor();
}

void GateLoadMessageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateLoadMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateLoadMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateLoadMessageResponse_descriptor_;
}

const GateLoadMessageResponse& GateLoadMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateLoadMessageResponse* GateLoadMessageResponse::default_instance_ = NULL;

GateLoadMessageResponse* GateLoadMessageResponse::New(::google::protobuf::Arena* arena) const {
  GateLoadMessageResponse* n = new GateLoadMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateLoadMessageResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  msgs_.Clear();
}

bool GateLoadMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateLoadMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Msgs;
        break;
      }

      // repeated .candy.meta.Message Msgs = 2;
      case 2: {
        if (tag == 18) {
         parse_Msgs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_Msgs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateLoadMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateLoadMessageResponse)
  return false;
#undef DO_
}

void GateLoadMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateLoadMessageResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .candy.meta.Message Msgs = 2;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msgs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateLoadMessageResponse)
}

::google::protobuf::uint8* GateLoadMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateLoadMessageResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // repeated .candy.meta.Message Msgs = 2;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msgs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateLoadMessageResponse)
  return target;
}

int GateLoadMessageResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .candy.meta.Message Msgs = 2;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateLoadMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateLoadMessageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateLoadMessageResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateLoadMessageResponse::MergeFrom(const GateLoadMessageResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgs_.MergeFrom(from.msgs_);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateLoadMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateLoadMessageResponse::CopyFrom(const GateLoadMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateLoadMessageResponse::IsInitialized() const {

  return true;
}

void GateLoadMessageResponse::Swap(GateLoadMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateLoadMessageResponse::InternalSwap(GateLoadMessageResponse* other) {
  std::swap(header_, other->header_);
  msgs_.UnsafeArenaSwap(&other->msgs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateLoadMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateLoadMessageResponse_descriptor_;
  metadata.reflection = GateLoadMessageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateLoadMessageResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateLoadMessageResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateLoadMessageResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateLoadMessageResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateLoadMessageResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadMessageResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateLoadMessageResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateLoadMessageResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateLoadMessageResponse.header)
}

// repeated .candy.meta.Message Msgs = 2;
int GateLoadMessageResponse::msgs_size() const {
  return msgs_.size();
}
void GateLoadMessageResponse::clear_msgs() {
  msgs_.Clear();
}
const ::candy::meta::Message& GateLoadMessageResponse::msgs(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_.Get(index);
}
::candy::meta::Message* GateLoadMessageResponse::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_.Mutable(index);
}
::candy::meta::Message* GateLoadMessageResponse::add_msgs() {
  // @@protoc_insertion_point(field_add:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::candy::meta::Message >*
GateLoadMessageResponse::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateLoadMessageResponse.Msgs)
  return &msgs_;
}
const ::google::protobuf::RepeatedPtrField< ::candy::meta::Message >&
GateLoadMessageResponse::msgs() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GateLoadGroupListRequest::GateLoadGroupListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateLoadGroupListRequest)
}

void GateLoadGroupListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateLoadGroupListRequest::GateLoadGroupListRequest(const GateLoadGroupListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateLoadGroupListRequest)
}

void GateLoadGroupListRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GateLoadGroupListRequest::~GateLoadGroupListRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateLoadGroupListRequest)
  SharedDtor();
}

void GateLoadGroupListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateLoadGroupListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateLoadGroupListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateLoadGroupListRequest_descriptor_;
}

const GateLoadGroupListRequest& GateLoadGroupListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateLoadGroupListRequest* GateLoadGroupListRequest::default_instance_ = NULL;

GateLoadGroupListRequest* GateLoadGroupListRequest::New(::google::protobuf::Arena* arena) const {
  GateLoadGroupListRequest* n = new GateLoadGroupListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateLoadGroupListRequest::Clear() {
}

bool GateLoadGroupListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateLoadGroupListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateLoadGroupListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateLoadGroupListRequest)
  return false;
#undef DO_
}

void GateLoadGroupListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateLoadGroupListRequest)
  // @@protoc_insertion_point(serialize_end:candy.meta.GateLoadGroupListRequest)
}

::google::protobuf::uint8* GateLoadGroupListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateLoadGroupListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateLoadGroupListRequest)
  return target;
}

int GateLoadGroupListRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateLoadGroupListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateLoadGroupListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateLoadGroupListRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateLoadGroupListRequest::MergeFrom(const GateLoadGroupListRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GateLoadGroupListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateLoadGroupListRequest::CopyFrom(const GateLoadGroupListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateLoadGroupListRequest::IsInitialized() const {

  return true;
}

void GateLoadGroupListRequest::Swap(GateLoadGroupListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateLoadGroupListRequest::InternalSwap(GateLoadGroupListRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateLoadGroupListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateLoadGroupListRequest_descriptor_;
  metadata.reflection = GateLoadGroupListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateLoadGroupListRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateLoadGroupListResponse::kHeaderFieldNumber;
const int GateLoadGroupListResponse::kGroupsFieldNumber;
#endif  // !_MSC_VER

GateLoadGroupListResponse::GateLoadGroupListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateLoadGroupListResponse)
}

void GateLoadGroupListResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateLoadGroupListResponse::GateLoadGroupListResponse(const GateLoadGroupListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateLoadGroupListResponse)
}

void GateLoadGroupListResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

GateLoadGroupListResponse::~GateLoadGroupListResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateLoadGroupListResponse)
  SharedDtor();
}

void GateLoadGroupListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateLoadGroupListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateLoadGroupListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateLoadGroupListResponse_descriptor_;
}

const GateLoadGroupListResponse& GateLoadGroupListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateLoadGroupListResponse* GateLoadGroupListResponse::default_instance_ = NULL;

GateLoadGroupListResponse* GateLoadGroupListResponse::New(::google::protobuf::Arena* arena) const {
  GateLoadGroupListResponse* n = new GateLoadGroupListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateLoadGroupListResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  groups_.Clear();
}

bool GateLoadGroupListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateLoadGroupListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        break;
      }

      // repeated .candy.meta.Group groups = 2;
      case 2: {
        if (tag == 18) {
         parse_groups:
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateLoadGroupListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateLoadGroupListResponse)
  return false;
#undef DO_
}

void GateLoadGroupListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateLoadGroupListResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .candy.meta.Group groups = 2;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(i), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateLoadGroupListResponse)
}

::google::protobuf::uint8* GateLoadGroupListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateLoadGroupListResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // repeated .candy.meta.Group groups = 2;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groups(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateLoadGroupListResponse)
  return target;
}

int GateLoadGroupListResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .candy.meta.Group groups = 2;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateLoadGroupListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateLoadGroupListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateLoadGroupListResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateLoadGroupListResponse::MergeFrom(const GateLoadGroupListResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  groups_.MergeFrom(from.groups_);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateLoadGroupListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateLoadGroupListResponse::CopyFrom(const GateLoadGroupListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateLoadGroupListResponse::IsInitialized() const {

  return true;
}

void GateLoadGroupListResponse::Swap(GateLoadGroupListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateLoadGroupListResponse::InternalSwap(GateLoadGroupListResponse* other) {
  std::swap(header_, other->header_);
  groups_.UnsafeArenaSwap(&other->groups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateLoadGroupListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateLoadGroupListResponse_descriptor_;
  metadata.reflection = GateLoadGroupListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateLoadGroupListResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateLoadGroupListResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateLoadGroupListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateLoadGroupListResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadGroupListResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateLoadGroupListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadGroupListResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateLoadGroupListResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateLoadGroupListResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateLoadGroupListResponse.header)
}

// repeated .candy.meta.Group groups = 2;
int GateLoadGroupListResponse::groups_size() const {
  return groups_.size();
}
void GateLoadGroupListResponse::clear_groups() {
  groups_.Clear();
}
const ::candy::meta::Group& GateLoadGroupListResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadGroupListResponse.groups)
  return groups_.Get(index);
}
::candy::meta::Group* GateLoadGroupListResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadGroupListResponse.groups)
  return groups_.Mutable(index);
}
::candy::meta::Group* GateLoadGroupListResponse::add_groups() {
  // @@protoc_insertion_point(field_add:candy.meta.GateLoadGroupListResponse.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::candy::meta::Group >*
GateLoadGroupListResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateLoadGroupListResponse.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::candy::meta::Group >&
GateLoadGroupListResponse::groups() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateLoadGroupListResponse.groups)
  return groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GateLoadFriendListRequest::GateLoadFriendListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateLoadFriendListRequest)
}

void GateLoadFriendListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GateLoadFriendListRequest::GateLoadFriendListRequest(const GateLoadFriendListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateLoadFriendListRequest)
}

void GateLoadFriendListRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GateLoadFriendListRequest::~GateLoadFriendListRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateLoadFriendListRequest)
  SharedDtor();
}

void GateLoadFriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateLoadFriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateLoadFriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateLoadFriendListRequest_descriptor_;
}

const GateLoadFriendListRequest& GateLoadFriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateLoadFriendListRequest* GateLoadFriendListRequest::default_instance_ = NULL;

GateLoadFriendListRequest* GateLoadFriendListRequest::New(::google::protobuf::Arena* arena) const {
  GateLoadFriendListRequest* n = new GateLoadFriendListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateLoadFriendListRequest::Clear() {
}

bool GateLoadFriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateLoadFriendListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateLoadFriendListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateLoadFriendListRequest)
  return false;
#undef DO_
}

void GateLoadFriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateLoadFriendListRequest)
  // @@protoc_insertion_point(serialize_end:candy.meta.GateLoadFriendListRequest)
}

::google::protobuf::uint8* GateLoadFriendListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateLoadFriendListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateLoadFriendListRequest)
  return target;
}

int GateLoadFriendListRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateLoadFriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateLoadFriendListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateLoadFriendListRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateLoadFriendListRequest::MergeFrom(const GateLoadFriendListRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GateLoadFriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateLoadFriendListRequest::CopyFrom(const GateLoadFriendListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateLoadFriendListRequest::IsInitialized() const {

  return true;
}

void GateLoadFriendListRequest::Swap(GateLoadFriendListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateLoadFriendListRequest::InternalSwap(GateLoadFriendListRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateLoadFriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateLoadFriendListRequest_descriptor_;
  metadata.reflection = GateLoadFriendListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateLoadFriendListRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateLoadFriendListResponse::kHeaderFieldNumber;
const int GateLoadFriendListResponse::kUsersFieldNumber;
#endif  // !_MSC_VER

GateLoadFriendListResponse::GateLoadFriendListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateLoadFriendListResponse)
}

void GateLoadFriendListResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateLoadFriendListResponse::GateLoadFriendListResponse(const GateLoadFriendListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateLoadFriendListResponse)
}

void GateLoadFriendListResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

GateLoadFriendListResponse::~GateLoadFriendListResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateLoadFriendListResponse)
  SharedDtor();
}

void GateLoadFriendListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateLoadFriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateLoadFriendListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateLoadFriendListResponse_descriptor_;
}

const GateLoadFriendListResponse& GateLoadFriendListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateLoadFriendListResponse* GateLoadFriendListResponse::default_instance_ = NULL;

GateLoadFriendListResponse* GateLoadFriendListResponse::New(::google::protobuf::Arena* arena) const {
  GateLoadFriendListResponse* n = new GateLoadFriendListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateLoadFriendListResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  users_.Clear();
}

bool GateLoadFriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateLoadFriendListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated int64 users = 2;
      case 2: {
        if (tag == 18) {
         parse_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_users())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_users())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateLoadFriendListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateLoadFriendListResponse)
  return false;
#undef DO_
}

void GateLoadFriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateLoadFriendListResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated int64 users = 2;
  if (this->users_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_users_cached_byte_size_);
  }
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateLoadFriendListResponse)
}

::google::protobuf::uint8* GateLoadFriendListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateLoadFriendListResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // repeated int64 users = 2;
  if (this->users_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _users_cached_byte_size_, target);
  }
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->users(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateLoadFriendListResponse)
  return target;
}

int GateLoadFriendListResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated int64 users = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->users_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->users(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _users_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateLoadFriendListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateLoadFriendListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateLoadFriendListResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateLoadFriendListResponse::MergeFrom(const GateLoadFriendListResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  users_.MergeFrom(from.users_);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateLoadFriendListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateLoadFriendListResponse::CopyFrom(const GateLoadFriendListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateLoadFriendListResponse::IsInitialized() const {

  return true;
}

void GateLoadFriendListResponse::Swap(GateLoadFriendListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateLoadFriendListResponse::InternalSwap(GateLoadFriendListResponse* other) {
  std::swap(header_, other->header_);
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateLoadFriendListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateLoadFriendListResponse_descriptor_;
  metadata.reflection = GateLoadFriendListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateLoadFriendListResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateLoadFriendListResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateLoadFriendListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateLoadFriendListResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadFriendListResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateLoadFriendListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadFriendListResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateLoadFriendListResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateLoadFriendListResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateLoadFriendListResponse.header)
}

// repeated int64 users = 2;
int GateLoadFriendListResponse::users_size() const {
  return users_.size();
}
void GateLoadFriendListResponse::clear_users() {
  users_.Clear();
}
 ::google::protobuf::int64 GateLoadFriendListResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadFriendListResponse.users)
  return users_.Get(index);
}
 void GateLoadFriendListResponse::set_users(int index, ::google::protobuf::int64 value) {
  users_.Set(index, value);
  // @@protoc_insertion_point(field_set:candy.meta.GateLoadFriendListResponse.users)
}
 void GateLoadFriendListResponse::add_users(::google::protobuf::int64 value) {
  users_.Add(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateLoadFriendListResponse.users)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GateLoadFriendListResponse::users() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateLoadFriendListResponse.users)
  return users_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GateLoadFriendListResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateLoadFriendListResponse.users)
  return &users_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateSendMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

GateSendMessageRequest::GateSendMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateSendMessageRequest)
}

void GateSendMessageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  msg_ = const_cast< ::candy::meta::Message*>(&::candy::meta::Message::default_instance());
}

GateSendMessageRequest::GateSendMessageRequest(const GateSendMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateSendMessageRequest)
}

void GateSendMessageRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_ = NULL;
}

GateSendMessageRequest::~GateSendMessageRequest() {
  // @@protoc_insertion_point(destructor:candy.meta.GateSendMessageRequest)
  SharedDtor();
}

void GateSendMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void GateSendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateSendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateSendMessageRequest_descriptor_;
}

const GateSendMessageRequest& GateSendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateSendMessageRequest* GateSendMessageRequest::default_instance_ = NULL;

GateSendMessageRequest* GateSendMessageRequest::New(::google::protobuf::Arena* arena) const {
  GateSendMessageRequest* n = new GateSendMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateSendMessageRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}

bool GateSendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateSendMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.Message Msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateSendMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateSendMessageRequest)
  return false;
#undef DO_
}

void GateSendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateSendMessageRequest)
  // optional .candy.meta.Message Msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateSendMessageRequest)
}

::google::protobuf::uint8* GateSendMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateSendMessageRequest)
  // optional .candy.meta.Message Msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateSendMessageRequest)
  return target;
}

int GateSendMessageRequest::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.Message Msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateSendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateSendMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateSendMessageRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateSendMessageRequest::MergeFrom(const GateSendMessageRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_msg()) {
    mutable_msg()->::candy::meta::Message::MergeFrom(from.msg());
  }
}

void GateSendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateSendMessageRequest::CopyFrom(const GateSendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateSendMessageRequest::IsInitialized() const {

  return true;
}

void GateSendMessageRequest::Swap(GateSendMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateSendMessageRequest::InternalSwap(GateSendMessageRequest* other) {
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateSendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateSendMessageRequest_descriptor_;
  metadata.reflection = GateSendMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateSendMessageRequest

// optional .candy.meta.Message Msg = 1;
bool GateSendMessageRequest::has_msg() const {
  return !_is_default_instance_ && msg_ != NULL;
}
void GateSendMessageRequest::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::candy::meta::Message& GateSendMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateSendMessageRequest.Msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
::candy::meta::Message* GateSendMessageRequest::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::candy::meta::Message;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateSendMessageRequest.Msg)
  return msg_;
}
::candy::meta::Message* GateSendMessageRequest::release_msg() {
  
  ::candy::meta::Message* temp = msg_;
  msg_ = NULL;
  return temp;
}
void GateSendMessageRequest::set_allocated_msg(::candy::meta::Message* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateSendMessageRequest.Msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GateSendMessageResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

GateSendMessageResponse::GateSendMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:candy.meta.GateSendMessageResponse)
}

void GateSendMessageResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::candy::meta::ResponseHeader*>(&::candy::meta::ResponseHeader::default_instance());
}

GateSendMessageResponse::GateSendMessageResponse(const GateSendMessageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:candy.meta.GateSendMessageResponse)
}

void GateSendMessageResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

GateSendMessageResponse::~GateSendMessageResponse() {
  // @@protoc_insertion_point(destructor:candy.meta.GateSendMessageResponse)
  SharedDtor();
}

void GateSendMessageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GateSendMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateSendMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateSendMessageResponse_descriptor_;
}

const GateSendMessageResponse& GateSendMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

GateSendMessageResponse* GateSendMessageResponse::default_instance_ = NULL;

GateSendMessageResponse* GateSendMessageResponse::New(::google::protobuf::Arena* arena) const {
  GateSendMessageResponse* n = new GateSendMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateSendMessageResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GateSendMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:candy.meta.GateSendMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .candy.meta.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:candy.meta.GateSendMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:candy.meta.GateSendMessageResponse)
  return false;
#undef DO_
}

void GateSendMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:candy.meta.GateSendMessageResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:candy.meta.GateSendMessageResponse)
}

::google::protobuf::uint8* GateSendMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:candy.meta.GateSendMessageResponse)
  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:candy.meta.GateSendMessageResponse)
  return target;
}

int GateSendMessageResponse::ByteSize() const {
  int total_size = 0;

  // optional .candy.meta.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateSendMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GateSendMessageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateSendMessageResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateSendMessageResponse::MergeFrom(const GateSendMessageResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header()) {
    mutable_header()->::candy::meta::ResponseHeader::MergeFrom(from.header());
  }
}

void GateSendMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateSendMessageResponse::CopyFrom(const GateSendMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateSendMessageResponse::IsInitialized() const {

  return true;
}

void GateSendMessageResponse::Swap(GateSendMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateSendMessageResponse::InternalSwap(GateSendMessageResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateSendMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateSendMessageResponse_descriptor_;
  metadata.reflection = GateSendMessageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateSendMessageResponse

// optional .candy.meta.ResponseHeader header = 1;
bool GateSendMessageResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void GateSendMessageResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::candy::meta::ResponseHeader& GateSendMessageResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateSendMessageResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::candy::meta::ResponseHeader* GateSendMessageResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateSendMessageResponse.header)
  return header_;
}
::candy::meta::ResponseHeader* GateSendMessageResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GateSendMessageResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateSendMessageResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace candy

// @@protoc_insertion_point(global_scope)
