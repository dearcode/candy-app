// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#ifndef PROTOBUF_gate_2eproto__INCLUDED
#define PROTOBUF_gate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace candy {
namespace meta {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_gate_2eproto();
void protobuf_AssignDesc_gate_2eproto();
void protobuf_ShutdownFile_gate_2eproto();

class GateAddFriendRequest;
class GateAddFriendResponse;
class GateCheckFileRequest;
class GateCheckFileResponse;
class GateCreateGroupRequest;
class GateCreateGroupResponse;
class GateDownloadFileRequest;
class GateDownloadFileResponse;
class GateFindUserRequest;
class GateFindUserResponse;
class GateGetUserInfoRequest;
class GateGetUserInfoResponse;
class GateHeartbeatRequest;
class GateHeartbeatResponse;
class GateLoadFriendListRequest;
class GateLoadFriendListResponse;
class GateLoadGroupListRequest;
class GateLoadGroupListResponse;
class GateLoadMessageRequest;
class GateLoadMessageResponse;
class GateNoticeRequest;
class GateNoticeResponse;
class GateRegisterRequest;
class GateRegisterResponse;
class GateSendMessageRequest;
class GateSendMessageResponse;
class GateUpdateUserInfoRequest;
class GateUpdateUserInfoResponse;
class GateUpdateUserPasswordRequest;
class GateUpdateUserPasswordResponse;
class GateUploadFileRequest;
class GateUploadFileResponse;
class GateUserLoginRequest;
class GateUserLoginResponse;
class GateUserLogoutRequest;
class GateUserLogoutResponse;

// ===================================================================

class GateFindUserRequest : public ::google::protobuf::Message {
 public:
  GateFindUserRequest();
  virtual ~GateFindUserRequest();

  GateFindUserRequest(const GateFindUserRequest& from);

  inline GateFindUserRequest& operator=(const GateFindUserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateFindUserRequest& default_instance();

  void Swap(GateFindUserRequest* other);

  // implements Message ----------------------------------------------

  inline GateFindUserRequest* New() const { return New(NULL); }

  GateFindUserRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateFindUserRequest& from);
  void MergeFrom(const GateFindUserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateFindUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string User = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:candy.meta.GateFindUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateFindUserRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateFindUserResponse : public ::google::protobuf::Message {
 public:
  GateFindUserResponse();
  virtual ~GateFindUserResponse();

  GateFindUserResponse(const GateFindUserResponse& from);

  inline GateFindUserResponse& operator=(const GateFindUserResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateFindUserResponse& default_instance();

  void Swap(GateFindUserResponse* other);

  // implements Message ----------------------------------------------

  inline GateFindUserResponse* New() const { return New(NULL); }

  GateFindUserResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateFindUserResponse& from);
  void MergeFrom(const GateFindUserResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateFindUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // repeated string users = 2;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 2;
  const ::std::string& users(int index) const;
  ::std::string* mutable_users(int index);
  void set_users(int index, const ::std::string& value);
  void set_users(int index, const char* value);
  void set_users(int index, const char* value, size_t size);
  ::std::string* add_users();
  void add_users(const ::std::string& value);
  void add_users(const char* value);
  void add_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_users();

  // @@protoc_insertion_point(class_scope:candy.meta.GateFindUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> users_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateFindUserResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateAddFriendRequest : public ::google::protobuf::Message {
 public:
  GateAddFriendRequest();
  virtual ~GateAddFriendRequest();

  GateAddFriendRequest(const GateAddFriendRequest& from);

  inline GateAddFriendRequest& operator=(const GateAddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateAddFriendRequest& default_instance();

  void Swap(GateAddFriendRequest* other);

  // implements Message ----------------------------------------------

  inline GateAddFriendRequest* New() const { return New(NULL); }

  GateAddFriendRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateAddFriendRequest& from);
  void MergeFrom(const GateAddFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateAddFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional bool Confirm = 2;
  void clear_confirm();
  static const int kConfirmFieldNumber = 2;
  bool confirm() const;
  void set_confirm(bool value);

  // optional string Msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:candy.meta.GateAddFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  bool confirm_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateAddFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateAddFriendResponse : public ::google::protobuf::Message {
 public:
  GateAddFriendResponse();
  virtual ~GateAddFriendResponse();

  GateAddFriendResponse(const GateAddFriendResponse& from);

  inline GateAddFriendResponse& operator=(const GateAddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateAddFriendResponse& default_instance();

  void Swap(GateAddFriendResponse* other);

  // implements Message ----------------------------------------------

  inline GateAddFriendResponse* New() const { return New(NULL); }

  GateAddFriendResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateAddFriendResponse& from);
  void MergeFrom(const GateAddFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateAddFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // optional bool Confirm = 2;
  void clear_confirm();
  static const int kConfirmFieldNumber = 2;
  bool confirm() const;
  void set_confirm(bool value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateAddFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  bool confirm_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateAddFriendResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateCreateGroupRequest : public ::google::protobuf::Message {
 public:
  GateCreateGroupRequest();
  virtual ~GateCreateGroupRequest();

  GateCreateGroupRequest(const GateCreateGroupRequest& from);

  inline GateCreateGroupRequest& operator=(const GateCreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateCreateGroupRequest& default_instance();

  void Swap(GateCreateGroupRequest* other);

  // implements Message ----------------------------------------------

  inline GateCreateGroupRequest* New() const { return New(NULL); }

  GateCreateGroupRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateCreateGroupRequest& from);
  void MergeFrom(const GateCreateGroupRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateCreateGroupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GroupName = 1;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 1;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // @@protoc_insertion_point(class_scope:candy.meta.GateCreateGroupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateCreateGroupRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateCreateGroupResponse : public ::google::protobuf::Message {
 public:
  GateCreateGroupResponse();
  virtual ~GateCreateGroupResponse();

  GateCreateGroupResponse(const GateCreateGroupResponse& from);

  inline GateCreateGroupResponse& operator=(const GateCreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateCreateGroupResponse& default_instance();

  void Swap(GateCreateGroupResponse* other);

  // implements Message ----------------------------------------------

  inline GateCreateGroupResponse* New() const { return New(NULL); }

  GateCreateGroupResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateCreateGroupResponse& from);
  void MergeFrom(const GateCreateGroupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateCreateGroupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // optional int64 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateCreateGroupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateCreateGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateRegisterRequest : public ::google::protobuf::Message {
 public:
  GateRegisterRequest();
  virtual ~GateRegisterRequest();

  GateRegisterRequest(const GateRegisterRequest& from);

  inline GateRegisterRequest& operator=(const GateRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateRegisterRequest& default_instance();

  void Swap(GateRegisterRequest* other);

  // implements Message ----------------------------------------------

  inline GateRegisterRequest* New() const { return New(NULL); }

  GateRegisterRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateRegisterRequest& from);
  void MergeFrom(const GateRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateRegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string User = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:candy.meta.GateRegisterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateRegisterResponse : public ::google::protobuf::Message {
 public:
  GateRegisterResponse();
  virtual ~GateRegisterResponse();

  GateRegisterResponse(const GateRegisterResponse& from);

  inline GateRegisterResponse& operator=(const GateRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateRegisterResponse& default_instance();

  void Swap(GateRegisterResponse* other);

  // implements Message ----------------------------------------------

  inline GateRegisterResponse* New() const { return New(NULL); }

  GateRegisterResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateRegisterResponse& from);
  void MergeFrom(const GateRegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateRegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // optional int64 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateRegisterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateRegisterResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateUpdateUserInfoRequest : public ::google::protobuf::Message {
 public:
  GateUpdateUserInfoRequest();
  virtual ~GateUpdateUserInfoRequest();

  GateUpdateUserInfoRequest(const GateUpdateUserInfoRequest& from);

  inline GateUpdateUserInfoRequest& operator=(const GateUpdateUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUpdateUserInfoRequest& default_instance();

  void Swap(GateUpdateUserInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GateUpdateUserInfoRequest* New() const { return New(NULL); }

  GateUpdateUserInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUpdateUserInfoRequest& from);
  void MergeFrom(const GateUpdateUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUpdateUserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string User = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string NickName = 2;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional bytes Avatar = 3;
  void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUpdateUserInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUpdateUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateUpdateUserInfoResponse : public ::google::protobuf::Message {
 public:
  GateUpdateUserInfoResponse();
  virtual ~GateUpdateUserInfoResponse();

  GateUpdateUserInfoResponse(const GateUpdateUserInfoResponse& from);

  inline GateUpdateUserInfoResponse& operator=(const GateUpdateUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUpdateUserInfoResponse& default_instance();

  void Swap(GateUpdateUserInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GateUpdateUserInfoResponse* New() const { return New(NULL); }

  GateUpdateUserInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUpdateUserInfoResponse& from);
  void MergeFrom(const GateUpdateUserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUpdateUserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // optional int64 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUpdateUserInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUpdateUserInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateUpdateUserPasswordRequest : public ::google::protobuf::Message {
 public:
  GateUpdateUserPasswordRequest();
  virtual ~GateUpdateUserPasswordRequest();

  GateUpdateUserPasswordRequest(const GateUpdateUserPasswordRequest& from);

  inline GateUpdateUserPasswordRequest& operator=(const GateUpdateUserPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUpdateUserPasswordRequest& default_instance();

  void Swap(GateUpdateUserPasswordRequest* other);

  // implements Message ----------------------------------------------

  inline GateUpdateUserPasswordRequest* New() const { return New(NULL); }

  GateUpdateUserPasswordRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUpdateUserPasswordRequest& from);
  void MergeFrom(const GateUpdateUserPasswordRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUpdateUserPasswordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string User = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUpdateUserPasswordRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUpdateUserPasswordRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateUpdateUserPasswordResponse : public ::google::protobuf::Message {
 public:
  GateUpdateUserPasswordResponse();
  virtual ~GateUpdateUserPasswordResponse();

  GateUpdateUserPasswordResponse(const GateUpdateUserPasswordResponse& from);

  inline GateUpdateUserPasswordResponse& operator=(const GateUpdateUserPasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUpdateUserPasswordResponse& default_instance();

  void Swap(GateUpdateUserPasswordResponse* other);

  // implements Message ----------------------------------------------

  inline GateUpdateUserPasswordResponse* New() const { return New(NULL); }

  GateUpdateUserPasswordResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUpdateUserPasswordResponse& from);
  void MergeFrom(const GateUpdateUserPasswordResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUpdateUserPasswordResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // optional int64 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUpdateUserPasswordResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUpdateUserPasswordResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateGetUserInfoRequest : public ::google::protobuf::Message {
 public:
  GateGetUserInfoRequest();
  virtual ~GateGetUserInfoRequest();

  GateGetUserInfoRequest(const GateGetUserInfoRequest& from);

  inline GateGetUserInfoRequest& operator=(const GateGetUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateGetUserInfoRequest& default_instance();

  void Swap(GateGetUserInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GateGetUserInfoRequest* New() const { return New(NULL); }

  GateGetUserInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateGetUserInfoRequest& from);
  void MergeFrom(const GateGetUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateGetUserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string UserName = 2;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional int64 UserID = 3;
  void clear_userid();
  static const int kUserIDFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateGetUserInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateGetUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateGetUserInfoResponse : public ::google::protobuf::Message {
 public:
  GateGetUserInfoResponse();
  virtual ~GateGetUserInfoResponse();

  GateGetUserInfoResponse(const GateGetUserInfoResponse& from);

  inline GateGetUserInfoResponse& operator=(const GateGetUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateGetUserInfoResponse& default_instance();

  void Swap(GateGetUserInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GateGetUserInfoResponse* New() const { return New(NULL); }

  GateGetUserInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateGetUserInfoResponse& from);
  void MergeFrom(const GateGetUserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateGetUserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // optional int64 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string User = 3;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string NickName = 4;
  void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional bytes Avatar = 5;
  void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:candy.meta.GateGetUserInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateGetUserInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateHeartbeatRequest : public ::google::protobuf::Message {
 public:
  GateHeartbeatRequest();
  virtual ~GateHeartbeatRequest();

  GateHeartbeatRequest(const GateHeartbeatRequest& from);

  inline GateHeartbeatRequest& operator=(const GateHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateHeartbeatRequest& default_instance();

  void Swap(GateHeartbeatRequest* other);

  // implements Message ----------------------------------------------

  inline GateHeartbeatRequest* New() const { return New(NULL); }

  GateHeartbeatRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateHeartbeatRequest& from);
  void MergeFrom(const GateHeartbeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateHeartbeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:candy.meta.GateHeartbeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateHeartbeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateHeartbeatResponse : public ::google::protobuf::Message {
 public:
  GateHeartbeatResponse();
  virtual ~GateHeartbeatResponse();

  GateHeartbeatResponse(const GateHeartbeatResponse& from);

  inline GateHeartbeatResponse& operator=(const GateHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateHeartbeatResponse& default_instance();

  void Swap(GateHeartbeatResponse* other);

  // implements Message ----------------------------------------------

  inline GateHeartbeatResponse* New() const { return New(NULL); }

  GateHeartbeatResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateHeartbeatResponse& from);
  void MergeFrom(const GateHeartbeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateHeartbeatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:candy.meta.GateHeartbeatResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateHeartbeatResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateUserLoginRequest : public ::google::protobuf::Message {
 public:
  GateUserLoginRequest();
  virtual ~GateUserLoginRequest();

  GateUserLoginRequest(const GateUserLoginRequest& from);

  inline GateUserLoginRequest& operator=(const GateUserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUserLoginRequest& default_instance();

  void Swap(GateUserLoginRequest* other);

  // implements Message ----------------------------------------------

  inline GateUserLoginRequest* New() const { return New(NULL); }

  GateUserLoginRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUserLoginRequest& from);
  void MergeFrom(const GateUserLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUserLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string User = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUserLoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUserLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateUserLoginResponse : public ::google::protobuf::Message {
 public:
  GateUserLoginResponse();
  virtual ~GateUserLoginResponse();

  GateUserLoginResponse(const GateUserLoginResponse& from);

  inline GateUserLoginResponse& operator=(const GateUserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUserLoginResponse& default_instance();

  void Swap(GateUserLoginResponse* other);

  // implements Message ----------------------------------------------

  inline GateUserLoginResponse* New() const { return New(NULL); }

  GateUserLoginResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUserLoginResponse& from);
  void MergeFrom(const GateUserLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUserLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // optional int64 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUserLoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUserLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateUserLogoutRequest : public ::google::protobuf::Message {
 public:
  GateUserLogoutRequest();
  virtual ~GateUserLogoutRequest();

  GateUserLogoutRequest(const GateUserLogoutRequest& from);

  inline GateUserLogoutRequest& operator=(const GateUserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUserLogoutRequest& default_instance();

  void Swap(GateUserLogoutRequest* other);

  // implements Message ----------------------------------------------

  inline GateUserLogoutRequest* New() const { return New(NULL); }

  GateUserLogoutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUserLogoutRequest& from);
  void MergeFrom(const GateUserLogoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUserLogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:candy.meta.GateUserLogoutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUserLogoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateUserLogoutResponse : public ::google::protobuf::Message {
 public:
  GateUserLogoutResponse();
  virtual ~GateUserLogoutResponse();

  GateUserLogoutResponse(const GateUserLogoutResponse& from);

  inline GateUserLogoutResponse& operator=(const GateUserLogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUserLogoutResponse& default_instance();

  void Swap(GateUserLogoutResponse* other);

  // implements Message ----------------------------------------------

  inline GateUserLogoutResponse* New() const { return New(NULL); }

  GateUserLogoutResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUserLogoutResponse& from);
  void MergeFrom(const GateUserLogoutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUserLogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUserLogoutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUserLogoutResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateUploadFileRequest : public ::google::protobuf::Message {
 public:
  GateUploadFileRequest();
  virtual ~GateUploadFileRequest();

  GateUploadFileRequest(const GateUploadFileRequest& from);

  inline GateUploadFileRequest& operator=(const GateUploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUploadFileRequest& default_instance();

  void Swap(GateUploadFileRequest* other);

  // implements Message ----------------------------------------------

  inline GateUploadFileRequest* New() const { return New(NULL); }

  GateUploadFileRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUploadFileRequest& from);
  void MergeFrom(const GateUploadFileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUploadFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes File = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUploadFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUploadFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateUploadFileResponse : public ::google::protobuf::Message {
 public:
  GateUploadFileResponse();
  virtual ~GateUploadFileResponse();

  GateUploadFileResponse(const GateUploadFileResponse& from);

  inline GateUploadFileResponse& operator=(const GateUploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUploadFileResponse& default_instance();

  void Swap(GateUploadFileResponse* other);

  // implements Message ----------------------------------------------

  inline GateUploadFileResponse* New() const { return New(NULL); }

  GateUploadFileResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUploadFileResponse& from);
  void MergeFrom(const GateUploadFileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUploadFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:candy.meta.GateUploadFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateUploadFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateCheckFileRequest : public ::google::protobuf::Message {
 public:
  GateCheckFileRequest();
  virtual ~GateCheckFileRequest();

  GateCheckFileRequest(const GateCheckFileRequest& from);

  inline GateCheckFileRequest& operator=(const GateCheckFileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateCheckFileRequest& default_instance();

  void Swap(GateCheckFileRequest* other);

  // implements Message ----------------------------------------------

  inline GateCheckFileRequest* New() const { return New(NULL); }

  GateCheckFileRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateCheckFileRequest& from);
  void MergeFrom(const GateCheckFileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateCheckFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Names = 1;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 1;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:candy.meta.GateCheckFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateCheckFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateCheckFileResponse : public ::google::protobuf::Message {
 public:
  GateCheckFileResponse();
  virtual ~GateCheckFileResponse();

  GateCheckFileResponse(const GateCheckFileResponse& from);

  inline GateCheckFileResponse& operator=(const GateCheckFileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateCheckFileResponse& default_instance();

  void Swap(GateCheckFileResponse* other);

  // implements Message ----------------------------------------------

  inline GateCheckFileResponse* New() const { return New(NULL); }

  GateCheckFileResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateCheckFileResponse& from);
  void MergeFrom(const GateCheckFileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateCheckFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // repeated string Names = 2;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 2;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:candy.meta.GateCheckFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateCheckFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateDownloadFileRequest : public ::google::protobuf::Message {
 public:
  GateDownloadFileRequest();
  virtual ~GateDownloadFileRequest();

  GateDownloadFileRequest(const GateDownloadFileRequest& from);

  inline GateDownloadFileRequest& operator=(const GateDownloadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateDownloadFileRequest& default_instance();

  void Swap(GateDownloadFileRequest* other);

  // implements Message ----------------------------------------------

  inline GateDownloadFileRequest* New() const { return New(NULL); }

  GateDownloadFileRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateDownloadFileRequest& from);
  void MergeFrom(const GateDownloadFileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateDownloadFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Names = 1;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 1;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:candy.meta.GateDownloadFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateDownloadFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateDownloadFileResponse : public ::google::protobuf::Message {
 public:
  GateDownloadFileResponse();
  virtual ~GateDownloadFileResponse();

  GateDownloadFileResponse(const GateDownloadFileResponse& from);

  inline GateDownloadFileResponse& operator=(const GateDownloadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateDownloadFileResponse& default_instance();

  void Swap(GateDownloadFileResponse* other);

  // implements Message ----------------------------------------------

  inline GateDownloadFileResponse* New() const { return New(NULL); }

  GateDownloadFileResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateDownloadFileResponse& from);
  void MergeFrom(const GateDownloadFileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateDownloadFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // map<string, bytes> Files = 2;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      files() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_files();

  // @@protoc_insertion_point(class_scope:candy.meta.GateDownloadFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 >
      GateDownloadFileResponse_FilesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > files_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateDownloadFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateNoticeRequest : public ::google::protobuf::Message {
 public:
  GateNoticeRequest();
  virtual ~GateNoticeRequest();

  GateNoticeRequest(const GateNoticeRequest& from);

  inline GateNoticeRequest& operator=(const GateNoticeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateNoticeRequest& default_instance();

  void Swap(GateNoticeRequest* other);

  // implements Message ----------------------------------------------

  inline GateNoticeRequest* New() const { return New(NULL); }

  GateNoticeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateNoticeRequest& from);
  void MergeFrom(const GateNoticeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateNoticeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .candy.meta.PushID ID = 1;
  int id_size() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::candy::meta::PushID& id(int index) const;
  ::candy::meta::PushID* mutable_id(int index);
  ::candy::meta::PushID* add_id();
  ::google::protobuf::RepeatedPtrField< ::candy::meta::PushID >*
      mutable_id();
  const ::google::protobuf::RepeatedPtrField< ::candy::meta::PushID >&
      id() const;

  // optional .candy.meta.Message Msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::candy::meta::Message& msg() const;
  ::candy::meta::Message* mutable_msg();
  ::candy::meta::Message* release_msg();
  void set_allocated_msg(::candy::meta::Message* msg);

  // @@protoc_insertion_point(class_scope:candy.meta.GateNoticeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::candy::meta::PushID > id_;
  ::candy::meta::Message* msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateNoticeRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateNoticeResponse : public ::google::protobuf::Message {
 public:
  GateNoticeResponse();
  virtual ~GateNoticeResponse();

  GateNoticeResponse(const GateNoticeResponse& from);

  inline GateNoticeResponse& operator=(const GateNoticeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateNoticeResponse& default_instance();

  void Swap(GateNoticeResponse* other);

  // implements Message ----------------------------------------------

  inline GateNoticeResponse* New() const { return New(NULL); }

  GateNoticeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateNoticeResponse& from);
  void MergeFrom(const GateNoticeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateNoticeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:candy.meta.GateNoticeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateNoticeResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateLoadMessageRequest : public ::google::protobuf::Message {
 public:
  GateLoadMessageRequest();
  virtual ~GateLoadMessageRequest();

  GateLoadMessageRequest(const GateLoadMessageRequest& from);

  inline GateLoadMessageRequest& operator=(const GateLoadMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLoadMessageRequest& default_instance();

  void Swap(GateLoadMessageRequest* other);

  // implements Message ----------------------------------------------

  inline GateLoadMessageRequest* New() const { return New(NULL); }

  GateLoadMessageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateLoadMessageRequest& from);
  void MergeFrom(const GateLoadMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateLoadMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional bool Reverse = 2;
  void clear_reverse();
  static const int kReverseFieldNumber = 2;
  bool reverse() const;
  void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:candy.meta.GateLoadMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  bool reverse_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateLoadMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateLoadMessageResponse : public ::google::protobuf::Message {
 public:
  GateLoadMessageResponse();
  virtual ~GateLoadMessageResponse();

  GateLoadMessageResponse(const GateLoadMessageResponse& from);

  inline GateLoadMessageResponse& operator=(const GateLoadMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLoadMessageResponse& default_instance();

  void Swap(GateLoadMessageResponse* other);

  // implements Message ----------------------------------------------

  inline GateLoadMessageResponse* New() const { return New(NULL); }

  GateLoadMessageResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateLoadMessageResponse& from);
  void MergeFrom(const GateLoadMessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateLoadMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // repeated .candy.meta.Message Msgs = 2;
  int msgs_size() const;
  void clear_msgs();
  static const int kMsgsFieldNumber = 2;
  const ::candy::meta::Message& msgs(int index) const;
  ::candy::meta::Message* mutable_msgs(int index);
  ::candy::meta::Message* add_msgs();
  ::google::protobuf::RepeatedPtrField< ::candy::meta::Message >*
      mutable_msgs();
  const ::google::protobuf::RepeatedPtrField< ::candy::meta::Message >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:candy.meta.GateLoadMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::candy::meta::Message > msgs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateLoadMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateLoadGroupListRequest : public ::google::protobuf::Message {
 public:
  GateLoadGroupListRequest();
  virtual ~GateLoadGroupListRequest();

  GateLoadGroupListRequest(const GateLoadGroupListRequest& from);

  inline GateLoadGroupListRequest& operator=(const GateLoadGroupListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLoadGroupListRequest& default_instance();

  void Swap(GateLoadGroupListRequest* other);

  // implements Message ----------------------------------------------

  inline GateLoadGroupListRequest* New() const { return New(NULL); }

  GateLoadGroupListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateLoadGroupListRequest& from);
  void MergeFrom(const GateLoadGroupListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateLoadGroupListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:candy.meta.GateLoadGroupListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateLoadGroupListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateLoadGroupListResponse : public ::google::protobuf::Message {
 public:
  GateLoadGroupListResponse();
  virtual ~GateLoadGroupListResponse();

  GateLoadGroupListResponse(const GateLoadGroupListResponse& from);

  inline GateLoadGroupListResponse& operator=(const GateLoadGroupListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLoadGroupListResponse& default_instance();

  void Swap(GateLoadGroupListResponse* other);

  // implements Message ----------------------------------------------

  inline GateLoadGroupListResponse* New() const { return New(NULL); }

  GateLoadGroupListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateLoadGroupListResponse& from);
  void MergeFrom(const GateLoadGroupListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateLoadGroupListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // repeated .candy.meta.Group groups = 2;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 2;
  const ::candy::meta::Group& groups(int index) const;
  ::candy::meta::Group* mutable_groups(int index);
  ::candy::meta::Group* add_groups();
  ::google::protobuf::RepeatedPtrField< ::candy::meta::Group >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::candy::meta::Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:candy.meta.GateLoadGroupListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::candy::meta::Group > groups_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateLoadGroupListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateLoadFriendListRequest : public ::google::protobuf::Message {
 public:
  GateLoadFriendListRequest();
  virtual ~GateLoadFriendListRequest();

  GateLoadFriendListRequest(const GateLoadFriendListRequest& from);

  inline GateLoadFriendListRequest& operator=(const GateLoadFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLoadFriendListRequest& default_instance();

  void Swap(GateLoadFriendListRequest* other);

  // implements Message ----------------------------------------------

  inline GateLoadFriendListRequest* New() const { return New(NULL); }

  GateLoadFriendListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateLoadFriendListRequest& from);
  void MergeFrom(const GateLoadFriendListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateLoadFriendListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:candy.meta.GateLoadFriendListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateLoadFriendListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateLoadFriendListResponse : public ::google::protobuf::Message {
 public:
  GateLoadFriendListResponse();
  virtual ~GateLoadFriendListResponse();

  GateLoadFriendListResponse(const GateLoadFriendListResponse& from);

  inline GateLoadFriendListResponse& operator=(const GateLoadFriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLoadFriendListResponse& default_instance();

  void Swap(GateLoadFriendListResponse* other);

  // implements Message ----------------------------------------------

  inline GateLoadFriendListResponse* New() const { return New(NULL); }

  GateLoadFriendListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateLoadFriendListResponse& from);
  void MergeFrom(const GateLoadFriendListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateLoadFriendListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // repeated int64 users = 2;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 2;
  ::google::protobuf::int64 users(int index) const;
  void set_users(int index, ::google::protobuf::int64 value);
  void add_users(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      users() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:candy.meta.GateLoadFriendListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > users_;
  mutable int _users_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateLoadFriendListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GateSendMessageRequest : public ::google::protobuf::Message {
 public:
  GateSendMessageRequest();
  virtual ~GateSendMessageRequest();

  GateSendMessageRequest(const GateSendMessageRequest& from);

  inline GateSendMessageRequest& operator=(const GateSendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateSendMessageRequest& default_instance();

  void Swap(GateSendMessageRequest* other);

  // implements Message ----------------------------------------------

  inline GateSendMessageRequest* New() const { return New(NULL); }

  GateSendMessageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateSendMessageRequest& from);
  void MergeFrom(const GateSendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateSendMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.Message Msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::candy::meta::Message& msg() const;
  ::candy::meta::Message* mutable_msg();
  ::candy::meta::Message* release_msg();
  void set_allocated_msg(::candy::meta::Message* msg);

  // @@protoc_insertion_point(class_scope:candy.meta.GateSendMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::Message* msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateSendMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class GateSendMessageResponse : public ::google::protobuf::Message {
 public:
  GateSendMessageResponse();
  virtual ~GateSendMessageResponse();

  GateSendMessageResponse(const GateSendMessageResponse& from);

  inline GateSendMessageResponse& operator=(const GateSendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateSendMessageResponse& default_instance();

  void Swap(GateSendMessageResponse* other);

  // implements Message ----------------------------------------------

  inline GateSendMessageResponse* New() const { return New(NULL); }

  GateSendMessageResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateSendMessageResponse& from);
  void MergeFrom(const GateSendMessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateSendMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .candy.meta.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::candy::meta::ResponseHeader& header() const;
  ::candy::meta::ResponseHeader* mutable_header();
  ::candy::meta::ResponseHeader* release_header();
  void set_allocated_header(::candy::meta::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:candy.meta.GateSendMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::candy::meta::ResponseHeader* header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateSendMessageResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GateFindUserRequest

// optional string User = 1;
inline void GateFindUserRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateFindUserRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateFindUserRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateFindUserRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateFindUserRequest.User)
}
inline void GateFindUserRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateFindUserRequest.User)
}
inline void GateFindUserRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateFindUserRequest.User)
}
inline ::std::string* GateFindUserRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateFindUserRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateFindUserRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateFindUserRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateFindUserRequest.User)
}

// -------------------------------------------------------------------

// GateFindUserResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateFindUserResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateFindUserResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateFindUserResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateFindUserResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateFindUserResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateFindUserResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateFindUserResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateFindUserResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateFindUserResponse.header)
}

// repeated string users = 2;
inline int GateFindUserResponse::users_size() const {
  return users_.size();
}
inline void GateFindUserResponse::clear_users() {
  users_.Clear();
}
inline const ::std::string& GateFindUserResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateFindUserResponse.users)
  return users_.Get(index);
}
inline ::std::string* GateFindUserResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateFindUserResponse.users)
  return users_.Mutable(index);
}
inline void GateFindUserResponse::set_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateFindUserResponse.users)
  users_.Mutable(index)->assign(value);
}
inline void GateFindUserResponse::set_users(int index, const char* value) {
  users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateFindUserResponse.users)
}
inline void GateFindUserResponse::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateFindUserResponse.users)
}
inline ::std::string* GateFindUserResponse::add_users() {
  return users_.Add();
}
inline void GateFindUserResponse::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateFindUserResponse.users)
}
inline void GateFindUserResponse::add_users(const char* value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateFindUserResponse.users)
}
inline void GateFindUserResponse::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateFindUserResponse.users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateFindUserResponse::users() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateFindUserResponse.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GateFindUserResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateFindUserResponse.users)
  return &users_;
}

// -------------------------------------------------------------------

// GateAddFriendRequest

// optional int64 UserID = 1;
inline void GateAddFriendRequest::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateAddFriendRequest::userid() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendRequest.UserID)
  return userid_;
}
inline void GateAddFriendRequest::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendRequest.UserID)
}

// optional bool Confirm = 2;
inline void GateAddFriendRequest::clear_confirm() {
  confirm_ = false;
}
inline bool GateAddFriendRequest::confirm() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendRequest.Confirm)
  return confirm_;
}
inline void GateAddFriendRequest::set_confirm(bool value) {
  
  confirm_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendRequest.Confirm)
}

// optional string Msg = 3;
inline void GateAddFriendRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateAddFriendRequest::msg() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendRequest.Msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateAddFriendRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendRequest.Msg)
}
inline void GateAddFriendRequest::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateAddFriendRequest.Msg)
}
inline void GateAddFriendRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateAddFriendRequest.Msg)
}
inline ::std::string* GateAddFriendRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateAddFriendRequest.Msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateAddFriendRequest::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateAddFriendRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateAddFriendRequest.Msg)
}

// -------------------------------------------------------------------

// GateAddFriendResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateAddFriendResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateAddFriendResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateAddFriendResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateAddFriendResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateAddFriendResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateAddFriendResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateAddFriendResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateAddFriendResponse.header)
}

// optional bool Confirm = 2;
inline void GateAddFriendResponse::clear_confirm() {
  confirm_ = false;
}
inline bool GateAddFriendResponse::confirm() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateAddFriendResponse.Confirm)
  return confirm_;
}
inline void GateAddFriendResponse::set_confirm(bool value) {
  
  confirm_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateAddFriendResponse.Confirm)
}

// -------------------------------------------------------------------

// GateCreateGroupRequest

// optional string GroupName = 1;
inline void GateCreateGroupRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateCreateGroupRequest::groupname() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCreateGroupRequest.GroupName)
  return groupname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateCreateGroupRequest::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateCreateGroupRequest.GroupName)
}
inline void GateCreateGroupRequest::set_groupname(const char* value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateCreateGroupRequest.GroupName)
}
inline void GateCreateGroupRequest::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateCreateGroupRequest.GroupName)
}
inline ::std::string* GateCreateGroupRequest::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCreateGroupRequest.GroupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateCreateGroupRequest::release_groupname() {
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateCreateGroupRequest::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateCreateGroupRequest.GroupName)
}

// -------------------------------------------------------------------

// GateCreateGroupResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateCreateGroupResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateCreateGroupResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateCreateGroupResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCreateGroupResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateCreateGroupResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCreateGroupResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateCreateGroupResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateCreateGroupResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateCreateGroupResponse.header)
}

// optional int64 ID = 2;
inline void GateCreateGroupResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateCreateGroupResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCreateGroupResponse.ID)
  return id_;
}
inline void GateCreateGroupResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateCreateGroupResponse.ID)
}

// -------------------------------------------------------------------

// GateRegisterRequest

// optional string User = 1;
inline void GateRegisterRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateRegisterRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateRegisterRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateRegisterRequest.User)
}
inline void GateRegisterRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateRegisterRequest.User)
}
inline void GateRegisterRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateRegisterRequest.User)
}
inline ::std::string* GateRegisterRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateRegisterRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateRegisterRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateRegisterRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateRegisterRequest.User)
}

// optional string Password = 2;
inline void GateRegisterRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateRegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterRequest.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateRegisterRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateRegisterRequest.Password)
}
inline void GateRegisterRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateRegisterRequest.Password)
}
inline void GateRegisterRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateRegisterRequest.Password)
}
inline ::std::string* GateRegisterRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateRegisterRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateRegisterRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateRegisterRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateRegisterRequest.Password)
}

// -------------------------------------------------------------------

// GateRegisterResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateRegisterResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateRegisterResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateRegisterResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateRegisterResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateRegisterResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateRegisterResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateRegisterResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateRegisterResponse.header)
}

// optional int64 ID = 2;
inline void GateRegisterResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateRegisterResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateRegisterResponse.ID)
  return id_;
}
inline void GateRegisterResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateRegisterResponse.ID)
}

// -------------------------------------------------------------------

// GateUpdateUserInfoRequest

// optional string User = 1;
inline void GateUpdateUserInfoRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUpdateUserInfoRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserInfoRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoRequest.User)
}
inline void GateUpdateUserInfoRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserInfoRequest.User)
}
inline void GateUpdateUserInfoRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserInfoRequest.User)
}
inline ::std::string* GateUpdateUserInfoRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUpdateUserInfoRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserInfoRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoRequest.User)
}

// optional string NickName = 2;
inline void GateUpdateUserInfoRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUpdateUserInfoRequest::nickname() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoRequest.NickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserInfoRequest::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoRequest.NickName)
}
inline void GateUpdateUserInfoRequest::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserInfoRequest.NickName)
}
inline void GateUpdateUserInfoRequest::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserInfoRequest.NickName)
}
inline ::std::string* GateUpdateUserInfoRequest::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoRequest.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUpdateUserInfoRequest::release_nickname() {
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserInfoRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoRequest.NickName)
}

// optional bytes Avatar = 3;
inline void GateUpdateUserInfoRequest::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUpdateUserInfoRequest::avatar() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoRequest.Avatar)
  return avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserInfoRequest::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoRequest.Avatar)
}
inline void GateUpdateUserInfoRequest::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserInfoRequest.Avatar)
}
inline void GateUpdateUserInfoRequest::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserInfoRequest.Avatar)
}
inline ::std::string* GateUpdateUserInfoRequest::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoRequest.Avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUpdateUserInfoRequest::release_avatar() {
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserInfoRequest::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoRequest.Avatar)
}

// -------------------------------------------------------------------

// GateUpdateUserInfoResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateUpdateUserInfoResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateUpdateUserInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateUpdateUserInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateUpdateUserInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserInfoResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateUpdateUserInfoResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateUpdateUserInfoResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserInfoResponse.header)
}

// optional int64 ID = 2;
inline void GateUpdateUserInfoResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateUpdateUserInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserInfoResponse.ID)
  return id_;
}
inline void GateUpdateUserInfoResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserInfoResponse.ID)
}

// -------------------------------------------------------------------

// GateUpdateUserPasswordRequest

// optional string User = 1;
inline void GateUpdateUserPasswordRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUpdateUserPasswordRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserPasswordRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserPasswordRequest.User)
}
inline void GateUpdateUserPasswordRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserPasswordRequest.User)
}
inline void GateUpdateUserPasswordRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserPasswordRequest.User)
}
inline ::std::string* GateUpdateUserPasswordRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserPasswordRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUpdateUserPasswordRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserPasswordRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserPasswordRequest.User)
}

// optional string Password = 2;
inline void GateUpdateUserPasswordRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUpdateUserPasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordRequest.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserPasswordRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserPasswordRequest.Password)
}
inline void GateUpdateUserPasswordRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUpdateUserPasswordRequest.Password)
}
inline void GateUpdateUserPasswordRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUpdateUserPasswordRequest.Password)
}
inline ::std::string* GateUpdateUserPasswordRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserPasswordRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUpdateUserPasswordRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUpdateUserPasswordRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserPasswordRequest.Password)
}

// -------------------------------------------------------------------

// GateUpdateUserPasswordResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateUpdateUserPasswordResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateUpdateUserPasswordResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateUpdateUserPasswordResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateUpdateUserPasswordResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUpdateUserPasswordResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateUpdateUserPasswordResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateUpdateUserPasswordResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUpdateUserPasswordResponse.header)
}

// optional int64 ID = 2;
inline void GateUpdateUserPasswordResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateUpdateUserPasswordResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUpdateUserPasswordResponse.ID)
  return id_;
}
inline void GateUpdateUserPasswordResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateUpdateUserPasswordResponse.ID)
}

// -------------------------------------------------------------------

// GateGetUserInfoRequest

// optional int32 type = 1;
inline void GateGetUserInfoRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 GateGetUserInfoRequest::type() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoRequest.type)
  return type_;
}
inline void GateGetUserInfoRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoRequest.type)
}

// optional string UserName = 2;
inline void GateGetUserInfoRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateGetUserInfoRequest::username() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoRequest.UserName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoRequest.UserName)
}
inline void GateGetUserInfoRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoRequest.UserName)
}
inline void GateGetUserInfoRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoRequest.UserName)
}
inline ::std::string* GateGetUserInfoRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateGetUserInfoRequest::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoRequest.UserName)
}

// optional int64 UserID = 3;
inline void GateGetUserInfoRequest::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateGetUserInfoRequest::userid() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoRequest.UserID)
  return userid_;
}
inline void GateGetUserInfoRequest::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoRequest.UserID)
}

// -------------------------------------------------------------------

// GateGetUserInfoResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateGetUserInfoResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateGetUserInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateGetUserInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateGetUserInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateGetUserInfoResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateGetUserInfoResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.header)
}

// optional int64 ID = 2;
inline void GateGetUserInfoResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateGetUserInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.ID)
  return id_;
}
inline void GateGetUserInfoResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.ID)
}

// optional string User = 3;
inline void GateGetUserInfoResponse::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateGetUserInfoResponse::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoResponse::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.User)
}
inline void GateGetUserInfoResponse::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoResponse.User)
}
inline void GateGetUserInfoResponse::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoResponse.User)
}
inline ::std::string* GateGetUserInfoResponse::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateGetUserInfoResponse::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoResponse::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.User)
}

// optional string NickName = 4;
inline void GateGetUserInfoResponse::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateGetUserInfoResponse::nickname() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.NickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoResponse::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.NickName)
}
inline void GateGetUserInfoResponse::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoResponse.NickName)
}
inline void GateGetUserInfoResponse::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoResponse.NickName)
}
inline ::std::string* GateGetUserInfoResponse::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateGetUserInfoResponse::release_nickname() {
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoResponse::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.NickName)
}

// optional bytes Avatar = 5;
inline void GateGetUserInfoResponse::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateGetUserInfoResponse::avatar() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateGetUserInfoResponse.Avatar)
  return avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoResponse::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateGetUserInfoResponse.Avatar)
}
inline void GateGetUserInfoResponse::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateGetUserInfoResponse.Avatar)
}
inline void GateGetUserInfoResponse::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateGetUserInfoResponse.Avatar)
}
inline ::std::string* GateGetUserInfoResponse::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateGetUserInfoResponse.Avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateGetUserInfoResponse::release_avatar() {
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateGetUserInfoResponse::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateGetUserInfoResponse.Avatar)
}

// -------------------------------------------------------------------

// GateHeartbeatRequest

// -------------------------------------------------------------------

// GateHeartbeatResponse

// -------------------------------------------------------------------

// GateUserLoginRequest

// optional string User = 1;
inline void GateUserLoginRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUserLoginRequest::user() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginRequest.User)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUserLoginRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUserLoginRequest.User)
}
inline void GateUserLoginRequest::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUserLoginRequest.User)
}
inline void GateUserLoginRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUserLoginRequest.User)
}
inline ::std::string* GateUserLoginRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLoginRequest.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUserLoginRequest::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUserLoginRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLoginRequest.User)
}

// optional string Password = 2;
inline void GateUserLoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUserLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginRequest.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUserLoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUserLoginRequest.Password)
}
inline void GateUserLoginRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUserLoginRequest.Password)
}
inline void GateUserLoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUserLoginRequest.Password)
}
inline ::std::string* GateUserLoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLoginRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUserLoginRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUserLoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLoginRequest.Password)
}

// -------------------------------------------------------------------

// GateUserLoginResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateUserLoginResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateUserLoginResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateUserLoginResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateUserLoginResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLoginResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateUserLoginResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateUserLoginResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLoginResponse.header)
}

// optional int64 ID = 2;
inline void GateUserLoginResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateUserLoginResponse::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLoginResponse.ID)
  return id_;
}
inline void GateUserLoginResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateUserLoginResponse.ID)
}

// -------------------------------------------------------------------

// GateUserLogoutRequest

// -------------------------------------------------------------------

// GateUserLogoutResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateUserLogoutResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateUserLogoutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateUserLogoutResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUserLogoutResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateUserLogoutResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUserLogoutResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateUserLogoutResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateUserLogoutResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUserLogoutResponse.header)
}

// -------------------------------------------------------------------

// GateUploadFileRequest

// optional bytes File = 1;
inline void GateUploadFileRequest::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GateUploadFileRequest::file() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUploadFileRequest.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUploadFileRequest::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:candy.meta.GateUploadFileRequest.File)
}
inline void GateUploadFileRequest::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:candy.meta.GateUploadFileRequest.File)
}
inline void GateUploadFileRequest::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateUploadFileRequest.File)
}
inline ::std::string* GateUploadFileRequest::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUploadFileRequest.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GateUploadFileRequest::release_file() {
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GateUploadFileRequest::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUploadFileRequest.File)
}

// -------------------------------------------------------------------

// GateUploadFileResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateUploadFileResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateUploadFileResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateUploadFileResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateUploadFileResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateUploadFileResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateUploadFileResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateUploadFileResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateUploadFileResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateUploadFileResponse.header)
}

// -------------------------------------------------------------------

// GateCheckFileRequest

// repeated string Names = 1;
inline int GateCheckFileRequest::names_size() const {
  return names_.size();
}
inline void GateCheckFileRequest::clear_names() {
  names_.Clear();
}
inline const ::std::string& GateCheckFileRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCheckFileRequest.Names)
  return names_.Get(index);
}
inline ::std::string* GateCheckFileRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCheckFileRequest.Names)
  return names_.Mutable(index);
}
inline void GateCheckFileRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateCheckFileRequest.Names)
  names_.Mutable(index)->assign(value);
}
inline void GateCheckFileRequest::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateCheckFileRequest.Names)
}
inline void GateCheckFileRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateCheckFileRequest.Names)
}
inline ::std::string* GateCheckFileRequest::add_names() {
  return names_.Add();
}
inline void GateCheckFileRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateCheckFileRequest.Names)
}
inline void GateCheckFileRequest::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateCheckFileRequest.Names)
}
inline void GateCheckFileRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateCheckFileRequest.Names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateCheckFileRequest::names() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateCheckFileRequest.Names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GateCheckFileRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateCheckFileRequest.Names)
  return &names_;
}

// -------------------------------------------------------------------

// GateCheckFileResponse

// optional .candy.meta.ResponseHeader Header = 1;
inline bool GateCheckFileResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateCheckFileResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateCheckFileResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCheckFileResponse.Header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateCheckFileResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCheckFileResponse.Header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateCheckFileResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateCheckFileResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateCheckFileResponse.Header)
}

// repeated string Names = 2;
inline int GateCheckFileResponse::names_size() const {
  return names_.size();
}
inline void GateCheckFileResponse::clear_names() {
  names_.Clear();
}
inline const ::std::string& GateCheckFileResponse::names(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateCheckFileResponse.Names)
  return names_.Get(index);
}
inline ::std::string* GateCheckFileResponse::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateCheckFileResponse.Names)
  return names_.Mutable(index);
}
inline void GateCheckFileResponse::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateCheckFileResponse.Names)
  names_.Mutable(index)->assign(value);
}
inline void GateCheckFileResponse::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateCheckFileResponse.Names)
}
inline void GateCheckFileResponse::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateCheckFileResponse.Names)
}
inline ::std::string* GateCheckFileResponse::add_names() {
  return names_.Add();
}
inline void GateCheckFileResponse::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateCheckFileResponse.Names)
}
inline void GateCheckFileResponse::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateCheckFileResponse.Names)
}
inline void GateCheckFileResponse::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateCheckFileResponse.Names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateCheckFileResponse::names() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateCheckFileResponse.Names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GateCheckFileResponse::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateCheckFileResponse.Names)
  return &names_;
}

// -------------------------------------------------------------------

// GateDownloadFileRequest

// repeated string Names = 1;
inline int GateDownloadFileRequest::names_size() const {
  return names_.size();
}
inline void GateDownloadFileRequest::clear_names() {
  names_.Clear();
}
inline const ::std::string& GateDownloadFileRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateDownloadFileRequest.Names)
  return names_.Get(index);
}
inline ::std::string* GateDownloadFileRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateDownloadFileRequest.Names)
  return names_.Mutable(index);
}
inline void GateDownloadFileRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:candy.meta.GateDownloadFileRequest.Names)
  names_.Mutable(index)->assign(value);
}
inline void GateDownloadFileRequest::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:candy.meta.GateDownloadFileRequest.Names)
}
inline void GateDownloadFileRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:candy.meta.GateDownloadFileRequest.Names)
}
inline ::std::string* GateDownloadFileRequest::add_names() {
  return names_.Add();
}
inline void GateDownloadFileRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateDownloadFileRequest.Names)
}
inline void GateDownloadFileRequest::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:candy.meta.GateDownloadFileRequest.Names)
}
inline void GateDownloadFileRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:candy.meta.GateDownloadFileRequest.Names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GateDownloadFileRequest::names() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateDownloadFileRequest.Names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GateDownloadFileRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateDownloadFileRequest.Names)
  return &names_;
}

// -------------------------------------------------------------------

// GateDownloadFileResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateDownloadFileResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateDownloadFileResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateDownloadFileResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateDownloadFileResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateDownloadFileResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateDownloadFileResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateDownloadFileResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateDownloadFileResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateDownloadFileResponse.header)
}

// map<string, bytes> Files = 2;
inline int GateDownloadFileResponse::files_size() const {
  return files_.size();
}
inline void GateDownloadFileResponse::clear_files() {
  files_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GateDownloadFileResponse::files() const {
  // @@protoc_insertion_point(field_map:candy.meta.GateDownloadFileResponse.Files)
  return files_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GateDownloadFileResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:candy.meta.GateDownloadFileResponse.Files)
  return files_.MutableMap();
}

// -------------------------------------------------------------------

// GateNoticeRequest

// repeated .candy.meta.PushID ID = 1;
inline int GateNoticeRequest::id_size() const {
  return id_.size();
}
inline void GateNoticeRequest::clear_id() {
  id_.Clear();
}
inline const ::candy::meta::PushID& GateNoticeRequest::id(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateNoticeRequest.ID)
  return id_.Get(index);
}
inline ::candy::meta::PushID* GateNoticeRequest::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateNoticeRequest.ID)
  return id_.Mutable(index);
}
inline ::candy::meta::PushID* GateNoticeRequest::add_id() {
  // @@protoc_insertion_point(field_add:candy.meta.GateNoticeRequest.ID)
  return id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::candy::meta::PushID >*
GateNoticeRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateNoticeRequest.ID)
  return &id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::candy::meta::PushID >&
GateNoticeRequest::id() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateNoticeRequest.ID)
  return id_;
}

// optional .candy.meta.Message Msg = 2;
inline bool GateNoticeRequest::has_msg() const {
  return !_is_default_instance_ && msg_ != NULL;
}
inline void GateNoticeRequest::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
inline const ::candy::meta::Message& GateNoticeRequest::msg() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateNoticeRequest.Msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::candy::meta::Message* GateNoticeRequest::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::candy::meta::Message;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateNoticeRequest.Msg)
  return msg_;
}
inline ::candy::meta::Message* GateNoticeRequest::release_msg() {
  
  ::candy::meta::Message* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void GateNoticeRequest::set_allocated_msg(::candy::meta::Message* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateNoticeRequest.Msg)
}

// -------------------------------------------------------------------

// GateNoticeResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateNoticeResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateNoticeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateNoticeResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateNoticeResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateNoticeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateNoticeResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateNoticeResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateNoticeResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateNoticeResponse.header)
}

// -------------------------------------------------------------------

// GateLoadMessageRequest

// optional int64 ID = 1;
inline void GateLoadMessageRequest::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GateLoadMessageRequest::id() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageRequest.ID)
  return id_;
}
inline void GateLoadMessageRequest::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateLoadMessageRequest.ID)
}

// optional bool Reverse = 2;
inline void GateLoadMessageRequest::clear_reverse() {
  reverse_ = false;
}
inline bool GateLoadMessageRequest::reverse() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageRequest.Reverse)
  return reverse_;
}
inline void GateLoadMessageRequest::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:candy.meta.GateLoadMessageRequest.Reverse)
}

// -------------------------------------------------------------------

// GateLoadMessageResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateLoadMessageResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateLoadMessageResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateLoadMessageResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateLoadMessageResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadMessageResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateLoadMessageResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateLoadMessageResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateLoadMessageResponse.header)
}

// repeated .candy.meta.Message Msgs = 2;
inline int GateLoadMessageResponse::msgs_size() const {
  return msgs_.size();
}
inline void GateLoadMessageResponse::clear_msgs() {
  msgs_.Clear();
}
inline const ::candy::meta::Message& GateLoadMessageResponse::msgs(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_.Get(index);
}
inline ::candy::meta::Message* GateLoadMessageResponse::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_.Mutable(index);
}
inline ::candy::meta::Message* GateLoadMessageResponse::add_msgs() {
  // @@protoc_insertion_point(field_add:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::candy::meta::Message >*
GateLoadMessageResponse::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateLoadMessageResponse.Msgs)
  return &msgs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::candy::meta::Message >&
GateLoadMessageResponse::msgs() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateLoadMessageResponse.Msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// GateLoadGroupListRequest

// -------------------------------------------------------------------

// GateLoadGroupListResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateLoadGroupListResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateLoadGroupListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateLoadGroupListResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadGroupListResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateLoadGroupListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadGroupListResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateLoadGroupListResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateLoadGroupListResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateLoadGroupListResponse.header)
}

// repeated .candy.meta.Group groups = 2;
inline int GateLoadGroupListResponse::groups_size() const {
  return groups_.size();
}
inline void GateLoadGroupListResponse::clear_groups() {
  groups_.Clear();
}
inline const ::candy::meta::Group& GateLoadGroupListResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadGroupListResponse.groups)
  return groups_.Get(index);
}
inline ::candy::meta::Group* GateLoadGroupListResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadGroupListResponse.groups)
  return groups_.Mutable(index);
}
inline ::candy::meta::Group* GateLoadGroupListResponse::add_groups() {
  // @@protoc_insertion_point(field_add:candy.meta.GateLoadGroupListResponse.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::candy::meta::Group >*
GateLoadGroupListResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateLoadGroupListResponse.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::candy::meta::Group >&
GateLoadGroupListResponse::groups() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateLoadGroupListResponse.groups)
  return groups_;
}

// -------------------------------------------------------------------

// GateLoadFriendListRequest

// -------------------------------------------------------------------

// GateLoadFriendListResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateLoadFriendListResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateLoadFriendListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateLoadFriendListResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadFriendListResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateLoadFriendListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateLoadFriendListResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateLoadFriendListResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateLoadFriendListResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateLoadFriendListResponse.header)
}

// repeated int64 users = 2;
inline int GateLoadFriendListResponse::users_size() const {
  return users_.size();
}
inline void GateLoadFriendListResponse::clear_users() {
  users_.Clear();
}
inline ::google::protobuf::int64 GateLoadFriendListResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:candy.meta.GateLoadFriendListResponse.users)
  return users_.Get(index);
}
inline void GateLoadFriendListResponse::set_users(int index, ::google::protobuf::int64 value) {
  users_.Set(index, value);
  // @@protoc_insertion_point(field_set:candy.meta.GateLoadFriendListResponse.users)
}
inline void GateLoadFriendListResponse::add_users(::google::protobuf::int64 value) {
  users_.Add(value);
  // @@protoc_insertion_point(field_add:candy.meta.GateLoadFriendListResponse.users)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GateLoadFriendListResponse::users() const {
  // @@protoc_insertion_point(field_list:candy.meta.GateLoadFriendListResponse.users)
  return users_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GateLoadFriendListResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:candy.meta.GateLoadFriendListResponse.users)
  return &users_;
}

// -------------------------------------------------------------------

// GateSendMessageRequest

// optional .candy.meta.Message Msg = 1;
inline bool GateSendMessageRequest::has_msg() const {
  return !_is_default_instance_ && msg_ != NULL;
}
inline void GateSendMessageRequest::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
inline const ::candy::meta::Message& GateSendMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateSendMessageRequest.Msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::candy::meta::Message* GateSendMessageRequest::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::candy::meta::Message;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateSendMessageRequest.Msg)
  return msg_;
}
inline ::candy::meta::Message* GateSendMessageRequest::release_msg() {
  
  ::candy::meta::Message* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void GateSendMessageRequest::set_allocated_msg(::candy::meta::Message* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateSendMessageRequest.Msg)
}

// -------------------------------------------------------------------

// GateSendMessageResponse

// optional .candy.meta.ResponseHeader header = 1;
inline bool GateSendMessageResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void GateSendMessageResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::candy::meta::ResponseHeader& GateSendMessageResponse::header() const {
  // @@protoc_insertion_point(field_get:candy.meta.GateSendMessageResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::candy::meta::ResponseHeader* GateSendMessageResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::candy::meta::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:candy.meta.GateSendMessageResponse.header)
  return header_;
}
inline ::candy::meta::ResponseHeader* GateSendMessageResponse::release_header() {
  
  ::candy::meta::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GateSendMessageResponse::set_allocated_header(::candy::meta::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:candy.meta.GateSendMessageResponse.header)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace candy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gate_2eproto__INCLUDED
